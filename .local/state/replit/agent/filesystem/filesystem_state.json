{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a Vietnamese massage spa booking web application built with a modern full-stack architecture. The system allows customers to book massage appointments, view available time slots, and make deposits for reservations. It includes an admin panel for managing technicians, services, and bookings.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 17, 2025)\n\n- **Migration Completed**: Successfully migrated from Replit Agent to Replit environment\n- **Blocked Time Slot Bug Fix**: Fixed critical logic error where blocked time slots only blocked exact start times\n  - Changed logic to properly block ALL time slots within blocked time ranges\n  - Example: If technician blocked 13:00-17:30, now correctly blocks 13:00, 14:00, 15:00, 16:00, 17:00\n  - Updated both `getAvailableTimeSlots` and `getTechnicianAvailability` functions\n- **UI Bug Fix**: Removed non-functional \"Hoàn tất\" button from step 3 \"Thông tin khách hàng\"\n  - Button was trying to navigate to non-existent step 4\n  - Booking completion is properly handled through BookingSummary component\n- **Duration Update**: Changed service duration from 60 minutes to 45 minutes throughout the system:\n  - Updated frontend display text from \"60 phút\" to \"45 phút\"\n  - Modified all duration logic in components (service selection, booking summary, booking lookup)\n  - Updated database records: all existing bookings changed from 60 to 45 minutes\n  - Updated default duration in booking initialization\n  - **Database Schema Update**: Renamed column from `price_60` to `price_45` in services table\n  - **Code Update**: Changed all references from `price60` to `price45` throughout the application\n  - Fixed total calculation logic in booking summary\n  - **Time Slot Bug Fix**: Fixed multi-slot booking availability logic - 90-minute bookings now correctly block all overlapping time slots\n- **Enhanced Payment Modals**: Improved payment flow user experience\n  - **Success Modal Enhancement**: Added complete booking information including massage time, additional services, total/deposit/remaining amounts\n  - **Button Update**: Changed \"Xong\" to \"Hoàn tất\" with page refresh functionality\n  - **Payment Verification Improvement**: Added complete bank transfer information in verification modal for users who missed previous step\n  - **Page Refresh**: Added page refresh functionality when clicking \"Hủy\" in payment verification modal\n- **Database Setup**: Created PostgreSQL database and pushed schema successfully\n- **Dependencies**: Installed missing tsx package and resolved build issues\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **UI Library**: Radix UI components with shadcn/ui styling\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **Routing**: Wouter for client-side routing\n- **State Management**: React Query (TanStack Query) for server state management\n- **Forms**: React Hook Form with Zod validation\n- **Build Tool**: Vite for development and build processes\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Real-time**: WebSocket support for live updates\n- **Session Management**: Express sessions with PostgreSQL storage\n\n### Key Components\n\n#### Database Schema\n- **Technicians**: Store massage therapist information (name, birth year, avatar, photos, specialties, experience, rating)\n- **Services**: Massage service types with pricing for 60 and 90-minute sessions\n- **Additional Services**: Add-on services like hot stones, cupping, acupressure\n- **Bookings**: Customer reservations with payment status and booking codes\n- **Blocked Time Slots**: Admin-managed unavailable time periods\n- **Admin Users**: Authentication for admin panel access\n\n#### Core Features\n1. **Booking System**:\n   - Two booking methods: by available time or by technician\n   - Service selection with duration options (60/90 minutes)\n   - Additional services selection\n   - Customer information collection\n   - 20% deposit requirement calculation\n\n2. **Payment Integration**:\n   - Bank transfer verification system\n   - QR code generation for booking lookup\n   - Booking code system for easy access\n\n3. **Admin Panel**:\n   - Technician management (CRUD operations)\n   - Service and pricing management\n   - Booking oversight and status updates\n   - Time slot blocking functionality\n\n4. **Real-time Features**:\n   - WebSocket connections for live booking updates\n   - Prevents double-booking through real-time synchronization\n\n## Data Flow\n\n1. **Customer Booking Flow**:\n   - Customer selects booking method (time-first or technician-first)\n   - Chooses service type and duration\n   - Selects available time slot\n   - Enters customer information\n   - Reviews booking summary with deposit calculation\n   - Completes payment verification\n   - Receives booking confirmation with QR code\n\n2. **Admin Management Flow**:\n   - Admin logs in through authentication system\n   - Manages technician profiles and availability\n   - Updates service offerings and pricing\n   - Monitors and manages customer bookings\n   - Blocks specific time slots as needed\n\n3. **Real-time Updates**:\n   - WebSocket broadcasts booking changes\n   - Clients receive live availability updates\n   - Prevents booking conflicts through immediate synchronization\n\n## External Dependencies\n\n### UI and Styling\n- Radix UI primitives for accessible components\n- Tailwind CSS for utility-first styling\n- Lucide React for icons\n- Class Variance Authority for component variants\n\n### Data Management\n- Drizzle ORM for type-safe database operations\n- Drizzle Zod for schema validation\n- React Query for server state management\n- React Hook Form for form handling\n\n### Development Tools\n- Vite for fast development and building\n- TypeScript for type safety\n- ESBuild for server bundling\n- Replit-specific plugins for development environment\n\n## Deployment Strategy\n\nThe application is designed for deployment on free hosting platforms:\n\n1. **Database**: Uses Neon Database (serverless PostgreSQL) for free tier compatibility\n2. **Frontend**: Static build output suitable for platforms like Vercel, Netlify, or Replit\n3. **Backend**: Express server bundled with ESBuild for Node.js hosting\n4. **Environment**: Configured for both development and production modes\n5. **WebSocket**: Uses standard WebSocket API for real-time features\n\nThe build process creates a production-ready bundle with the frontend in `dist/public` and the backend server in `dist/index.js`, making it easy to deploy on various hosting platforms while maintaining the full-stack functionality.","size_bytes":6781},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes-simple.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { simpleStorage } from \"./storage-simple\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize sample data\n  await simpleStorage.initializeSampleData();\n  \n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  // Broadcast to all connected clients\n  const broadcast = (data: any) => {\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  };\n\n  // API Routes\n  app.get(\"/api/technicians\", async (req, res) => {\n    try {\n      const technicians = await simpleStorage.getTechnicians();\n      res.json(technicians);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch technicians\" });\n    }\n  });\n\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await simpleStorage.getServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.get(\"/api/additional-services\", async (req, res) => {\n    try {\n      const additionalServices = await simpleStorage.getAdditionalServices();\n      res.json(additionalServices);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch additional services\" });\n    }\n  });\n\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookings = await simpleStorage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get(\"/api/bookings/lookup/:code\", async (req, res) => {\n    try {\n      const code = req.params.code;\n      const booking = await simpleStorage.getBookingByCode(code);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookingData = req.body;\n      const booking = await simpleStorage.createBooking(bookingData);\n      broadcast({ type: 'booking_created', data: booking });\n      res.status(201).json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Simple availability endpoint\n  app.get(\"/api/availability\", async (req, res) => {\n    try {\n      const { date, duration } = req.query;\n      if (!date || !duration) {\n        return res.status(400).json({ message: \"Date and duration are required\" });\n      }\n      \n      // For now, return all technicians as available\n      const technicians = await simpleStorage.getTechnicians();\n      const operatingHours = [];\n      \n      // Generate time slots from 9 AM to 9 PM (every 30 minutes)\n      for (let hour = 9; hour <= 21; hour++) {\n        for (let minute = 0; minute < 60; minute += 30) {\n          const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n          operatingHours.push({\n            time,\n            availableTechnicians: technicians\n          });\n        }\n      }\n      \n      res.json(operatingHours);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch availability\" });\n    }\n  });\n\n  return httpServer;\n}","size_bytes":3803},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { simpleStorage } from \"./storage-simple\";\nimport { insertBookingSchema, insertTechnicianSchema, insertBlockedTimeSlotSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\n// Helper function to convert time string to minutes\nconst timeToMinutes = (time: string): number => {\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\n\n// Availability logic functions\nconst generateTimeSlots = () => {\n  const slots = [];\n  // Generate hourly slots from 13:00 to 22:00\n  for (let hour = 13; hour <= 21; hour++) {\n    const timeStr = `${hour.toString().padStart(2, '0')}:00`;\n    slots.push(timeStr);\n  }\n  return slots;\n};\n\nconst getAvailableTimeSlots = async (dateStr: string, duration: number) => {\n  try {\n    const slots = generateTimeSlots();\n    const technicians = await simpleStorage.getTechnicians();\n    const date = new Date(dateStr + 'T00:00:00.000Z');\n    \n    // Get existing bookings for the date\n    const existingBookings = await db.select().from(schema.bookings)\n      .where(eq(schema.bookings.bookingDate, date));\n    \n    // Get blocked time slots for the date\n    const blockedSlots = await db.select().from(schema.blockedTimeSlots)\n      .where(eq(schema.blockedTimeSlots.blockDate, date));\n    \n    const availableSlots = [];\n    \n    for (const timeSlot of slots) {\n      const availableTechnicians = [];\n      \n      for (const technician of technicians) {\n        // Check if technician is available at this time slot\n        // Need to check if this time slot conflicts with any existing booking\n        const isBooked = existingBookings.some(booking => {\n          if (booking.technicianId !== technician.id) return false;\n          \n          // Convert times to minutes for easier calculation\n          const slotStart = timeToMinutes(timeSlot);\n          const bookingStart = timeToMinutes(booking.startTime);\n          const bookingEnd = timeToMinutes(booking.endTime);\n          \n          // Check if this time slot overlaps with the booking\n          return slotStart >= bookingStart && slotStart < bookingEnd;\n        });\n        \n        const isBlocked = blockedSlots.some(blocked => {\n          if (blocked.technicianId !== technician.id) return false;\n          \n          // Convert times to minutes for easier calculation\n          const slotStart = timeToMinutes(timeSlot);\n          const blockedStart = timeToMinutes(blocked.startTime);\n          const blockedEnd = timeToMinutes(blocked.endTime);\n          \n          // Check if this time slot falls within the blocked period\n          return slotStart >= blockedStart && slotStart < blockedEnd;\n        });\n        \n        if (!isBooked && !isBlocked) {\n          availableTechnicians.push(technician);\n        }\n      }\n      \n      if (availableTechnicians.length > 0) {\n        availableSlots.push({\n          time: timeSlot,\n          availableTechnicians\n        });\n      }\n    }\n    \n    return availableSlots;\n  } catch (error) {\n    console.error('Error getting available time slots:', error);\n    return [];\n  }\n};\n\nconst getTechnicianAvailability = async (technicianId: number, dateStr: string) => {\n  try {\n    const slots = generateTimeSlots();\n    const date = new Date(dateStr + 'T00:00:00.000Z');\n    \n    // Get existing bookings for the technician and date\n    const existingBookings = await db.select().from(schema.bookings)\n      .where(and(\n        eq(schema.bookings.technicianId, technicianId),\n        eq(schema.bookings.bookingDate, date)\n      ));\n    \n    // Get blocked time slots for the technician and date\n    const blockedSlots = await db.select().from(schema.blockedTimeSlots)\n      .where(and(\n        eq(schema.blockedTimeSlots.technicianId, technicianId),\n        eq(schema.blockedTimeSlots.blockDate, date)\n      ));\n    \n    const availableSlots = slots.filter(timeSlot => {\n      // Check if this time slot conflicts with any existing booking\n      const isBooked = existingBookings.some(booking => {\n        // Convert times to minutes for easier calculation\n        const slotStart = timeToMinutes(timeSlot);\n        const bookingStart = timeToMinutes(booking.startTime);\n        const bookingEnd = timeToMinutes(booking.endTime);\n        \n        // Check if this time slot overlaps with the booking\n        return slotStart >= bookingStart && slotStart < bookingEnd;\n      });\n      \n      const isBlocked = blockedSlots.some(blockedSlot => {\n        // Convert times to minutes for easier calculation\n        const slotStart = timeToMinutes(timeSlot);\n        const blockedStart = timeToMinutes(blockedSlot.startTime);\n        const blockedEnd = timeToMinutes(blockedSlot.endTime);\n        \n        // Check if this time slot falls within the blocked period\n        return slotStart >= blockedStart && slotStart < blockedEnd;\n      });\n      \n      return !isBooked && !isBlocked;\n    });\n    \n    return availableSlots;\n  } catch (error) {\n    console.error('Error getting technician availability:', error);\n    return [];\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize sample data\n  await simpleStorage.initializeSampleData();\n  \n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('WebSocket client connected');\n    \n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  // Broadcast to all connected clients\n  const broadcast = (data: any) => {\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify(data));\n      }\n    });\n  };\n\n  // Technicians\n  app.get(\"/api/technicians\", async (req, res) => {\n    try {\n      const technicians = await simpleStorage.getTechnicians();\n      res.json(technicians);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch technicians\" });\n    }\n  });\n\n  app.get(\"/api/technicians/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const technicians = await simpleStorage.getTechnicians();\n      const technician = technicians.find(t => t.id === id);\n      if (!technician) {\n        return res.status(404).json({ message: \"Technician not found\" });\n      }\n      res.json(technician);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch technician\" });\n    }\n  });\n\n  app.post(\"/api/technicians\", async (req, res) => {\n    try {\n      const technicianData = insertTechnicianSchema.parse(req.body);\n      const technician = await simpleStorage.createTechnician(technicianData);\n      broadcast({ type: 'technician_created', data: technician });\n      res.status(201).json(technician);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create technician\" });\n    }\n  });\n\n  app.put(\"/api/technicians/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const technicianData = insertTechnicianSchema.partial().parse(req.body);\n      const technician = await simpleStorage.updateTechnician(id, technicianData);\n      broadcast({ type: 'technician_updated', data: technician });\n      res.json(technician);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update technician\" });\n    }\n  });\n\n  app.delete(\"/api/technicians/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await simpleStorage.deleteTechnician(id);\n      broadcast({ type: 'technician_deleted', data: { id } });\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete technician\" });\n    }\n  });\n\n  // Services\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await simpleStorage.getServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.get(\"/api/additional-services\", async (req, res) => {\n    try {\n      const services = await simpleStorage.getAdditionalServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch additional services\" });\n    }\n  });\n\n  // Availability\n  app.get(\"/api/availability/:date/:duration\", async (req, res) => {\n    try {\n      const { date, duration } = req.params;\n      if (!date || !duration) {\n        return res.status(400).json({ message: \"Date and duration are required\" });\n      }\n      \n      const availability = await getAvailableTimeSlots(\n        date as string,\n        parseInt(duration as string)\n      );\n      res.json(availability);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch availability\" });\n    }\n  });\n\n  app.get(\"/api/technicians/:id/availability\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { date } = req.query;\n      if (!date) {\n        return res.status(400).json({ message: \"Date is required\" });\n      }\n      \n      const availability = await getTechnicianAvailability(id, date as string);\n      res.json(availability);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch technician availability\" });\n    }\n  });\n\n  // Bookings\n  app.get(\"/api/bookings\", async (req, res) => {\n    try {\n      const bookings = await simpleStorage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const booking = await simpleStorage.getBooking(id);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      res.json(booking);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  app.get(\"/api/bookings/lookup/:code\", async (req, res) => {\n    try {\n      const code = req.params.code;\n      const booking = await simpleStorage.getBookingByCode(code);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      // Get related data\n      const technician = await simpleStorage.getTechnician(booking.technicianId!);\n      const service = await simpleStorage.getService(booking.serviceId!);\n      const additionalServices = await Promise.all(\n        (booking.additionalServiceIds || []).map(id => simpleStorage.getAdditionalService(id))\n      );\n      \n      res.json({\n        ...booking,\n        technician,\n        service,\n        additionalServices: additionalServices.filter(Boolean),\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to lookup booking\" });\n    }\n  });\n\n  app.post(\"/api/bookings\", async (req, res) => {\n    try {\n      console.log(\"Booking payload received:\", JSON.stringify(req.body, null, 2));\n      const bookingData = insertBookingSchema.parse(req.body);\n      \n      const booking = await simpleStorage.createBooking(bookingData);\n      \n      broadcast({ type: 'booking_created', data: booking });\n      res.status(201).json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        console.log(\"Validation errors:\", error.errors);\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Booking creation error:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.put(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const bookingData = insertBookingSchema.partial().parse(req.body);\n      const booking = await simpleStorage.updateBooking(id, bookingData);\n      broadcast({ type: 'booking_updated', data: booking });\n      res.json(booking);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update booking\" });\n    }\n  });\n\n  app.delete(\"/api/bookings/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await simpleStorage.deleteBooking(id);\n      broadcast({ type: 'booking_deleted', data: { id } });\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete booking\" });\n    }\n  });\n\n  // Mock payment verification\n  app.post(\"/api/bookings/:id/verify-payment\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const booking = await simpleStorage.getBooking(id);\n      \n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      // Mock payment verification - in real implementation, this would check with payment provider\n      const isPaymentValid = Math.random() > 0.1; // 90% success rate for demo\n      \n      if (isPaymentValid) {\n        const updatedBooking = await simpleStorage.updateBooking(id, {\n          isPaid: true,\n          status: 'confirmed',\n          paymentMethod: 'bank_transfer',\n        });\n        \n        broadcast({ type: 'payment_verified', data: updatedBooking });\n        res.json({ success: true, booking: updatedBooking });\n      } else {\n        res.status(400).json({ success: false, message: \"Payment verification failed\" });\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to verify payment\" });\n    }\n  });\n\n  // Blocked time slots\n  app.get(\"/api/blocked-time-slots\", async (req, res) => {\n    try {\n      const slots = await simpleStorage.getBlockedTimeSlots();\n      res.json(slots);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch blocked time slots\" });\n    }\n  });\n\n  app.post(\"/api/blocked-time-slots\", async (req, res) => {\n    try {\n      const slotData = insertBlockedTimeSlotSchema.parse(req.body);\n      const slot = await simpleStorage.createBlockedTimeSlot(slotData);\n      broadcast({ type: 'time_slot_blocked', data: slot });\n      res.status(201).json(slot);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create blocked time slot\" });\n    }\n  });\n\n  app.delete(\"/api/blocked-time-slots/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await simpleStorage.deleteBlockedTimeSlot(id);\n      broadcast({ type: 'time_slot_unblocked', data: { id } });\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete blocked time slot\" });\n    }\n  });\n\n  // Admin authentication (basic implementation)\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      const admin = await simpleStorage.getAdminUserByUsername(username);\n      \n      if (!admin || admin.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      // In a real implementation, you would generate and return a JWT token\n      res.json({ success: true, admin: { id: admin.id, username: admin.username } });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n\n  return httpServer;\n}\n","size_bytes":15993},"server/storage-simple.ts":{"content":"import { db } from \"./db\";\nimport * as schema from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport class SimpleDatabaseStorage {\n  // Initialize sample data\n  async initializeSampleData() {\n    try {\n      // Check if data already exists\n      const existingTechnicians = await db.select().from(schema.technicians).limit(1);\n      if (existingTechnicians.length > 0) {\n        console.log(\"Sample data already exists\");\n        return;\n      }\n\n      // Create sample technicians\n      const techniciansData = [\n        {\n          name: \"Nguyễn Thị Lan\",\n          birthYear: 1985,\n          experience: 8,\n          avatar: null,\n          photos: [\"https://via.placeholder.com/150x200/4F46E5/FFFFFF?text=Technician+1\"],\n          notes: \"Chuyên massage thái và massage toàn thân\",\n          specialties: [\"Massage Thái\", \"Massage Toàn Thân\"],\n          rating: \"4.8\",\n          isActive: true\n        },\n        {\n          name: \"Trần Văn Minh\",\n          birthYear: 1990,\n          experience: 5,\n          avatar: null,\n          photos: [\"https://via.placeholder.com/150x200/059669/FFFFFF?text=Technician+2\"],\n          notes: \"Chuyên massage cổ vai gáy và châm cứu\",\n          specialties: [\"Massage Cổ-Vai-Gáy\", \"Châm cứu\"],\n          rating: \"4.5\",\n          isActive: true\n        },\n        {\n          name: \"Lê Thị Hương\",\n          birthYear: 1988,\n          experience: 6,\n          avatar: null,\n          photos: [\"https://via.placeholder.com/150x200/DC2626/FFFFFF?text=Technician+3\"],\n          notes: \"Chuyên massage thư giãn và đá nóng\",\n          specialties: [\"Massage Thư Giãn\", \"Đá Nóng\"],\n          rating: \"4.7\",\n          isActive: true\n        }\n      ];\n\n      await db.insert(schema.technicians).values(techniciansData);\n\n      // Create sample services\n      const servicesData = [\n        {\n          name: \"Massage Toàn Thân\",\n          description: \"Massage thư giãn toàn thân giúp giảm căng thẳng\",\n          price45: 400000,\n          price90: 600000,\n          isActive: true\n        },\n        {\n          name: \"Massage Cổ-Vai-Gáy\",\n          description: \"Massage tập trung vào vùng cổ, vai và gáy\",\n          price45: 300000,\n          price90: 450000,\n          isActive: true\n        },\n        {\n          name: \"Massage Thái\",\n          description: \"Massage theo phong cách truyền thống Thái Lan\",\n          price45: 450000,\n          price90: 650000,\n          isActive: true\n        }\n      ];\n\n      await db.insert(schema.services).values(servicesData);\n\n      // Create sample additional services\n      const additionalServicesData = [\n        {\n          name: \"Đá Nóng\",\n          price: 100000,\n          isActive: true\n        },\n        {\n          name: \"Giác Hơi\",\n          price: 80000,\n          isActive: true\n        },\n        {\n          name: \"Ấn Huyệt\",\n          price: 120000,\n          isActive: true\n        }\n      ];\n\n      await db.insert(schema.additionalServices).values(additionalServicesData);\n\n      console.log(\"Sample data initialized successfully\");\n    } catch (error) {\n      console.error(\"Error initializing sample data:\", error);\n    }\n  }\n\n  // Simple methods that work with the database\n  async getTechnicians() {\n    return await db.select().from(schema.technicians).where(eq(schema.technicians.isActive, true));\n  }\n\n  async getServices() {\n    return await db.select().from(schema.services).where(eq(schema.services.isActive, true));\n  }\n\n  async getAdditionalServices() {\n    return await db.select().from(schema.additionalServices).where(eq(schema.additionalServices.isActive, true));\n  }\n\n  async getBookings() {\n    return await db.select().from(schema.bookings);\n  }\n\n  async createBooking(bookingData: any) {\n    const bookingCode = this.generateBookingCode();\n    const qrCode = `MB-${bookingCode}-${Date.now()}`;\n    \n    const [booking] = await db.insert(schema.bookings).values({\n      ...bookingData,\n      bookingCode,\n      qrCode,\n      additionalServiceIds: bookingData.additionalServiceIds || []\n    }).returning();\n    \n    return booking;\n  }\n\n  async getBookingByCode(code: string) {\n    const [booking] = await db.select().from(schema.bookings).where(eq(schema.bookings.bookingCode, code));\n    return booking;\n  }\n\n  async getTechnician(id: number) {\n    const [technician] = await db.select().from(schema.technicians).where(eq(schema.technicians.id, id));\n    return technician;\n  }\n\n  async getService(id: number) {\n    const [service] = await db.select().from(schema.services).where(eq(schema.services.id, id));\n    return service;\n  }\n\n  async getAdditionalService(id: number) {\n    const [service] = await db.select().from(schema.additionalServices).where(eq(schema.additionalServices.id, id));\n    return service;\n  }\n\n  async getBooking(id: number) {\n    const [booking] = await db.select().from(schema.bookings).where(eq(schema.bookings.id, id));\n    return booking;\n  }\n\n  async createTechnician(data: any) {\n    const [technician] = await db.insert(schema.technicians).values(data).returning();\n    return technician;\n  }\n\n  async updateTechnician(id: number, data: any) {\n    const [technician] = await db.update(schema.technicians).set(data).where(eq(schema.technicians.id, id)).returning();\n    return technician;\n  }\n\n  async deleteTechnician(id: number) {\n    await db.delete(schema.technicians).where(eq(schema.technicians.id, id));\n  }\n\n  async createService(data: any) {\n    const [service] = await db.insert(schema.services).values(data).returning();\n    return service;\n  }\n\n  async createAdditionalService(data: any) {\n    const [service] = await db.insert(schema.additionalServices).values(data).returning();\n    return service;\n  }\n\n  async updateBooking(id: number, data: any) {\n    const [booking] = await db.update(schema.bookings).set(data).where(eq(schema.bookings.id, id)).returning();\n    return booking;\n  }\n\n  async deleteBooking(id: number) {\n    await db.delete(schema.bookings).where(eq(schema.bookings.id, id));\n  }\n\n  async getBlockedTimeSlots() {\n    return await db.select().from(schema.blockedTimeSlots);\n  }\n\n  async createBlockedTimeSlot(data: any) {\n    const [slot] = await db.insert(schema.blockedTimeSlots).values(data).returning();\n    return slot;\n  }\n\n  async deleteBlockedTimeSlot(id: number) {\n    await db.delete(schema.blockedTimeSlots).where(eq(schema.blockedTimeSlots.id, id));\n  }\n\n  async getAdminUserByUsername(username: string) {\n    const [admin] = await db.select().from(schema.adminUsers).where(eq(schema.adminUsers.username, username));\n    return admin;\n  }\n\n  async createAdminUser(data: any) {\n    const [admin] = await db.insert(schema.adminUsers).values(data).returning();\n    return admin;\n  }\n\n  private generateBookingCode(): string {\n    const timestamp = Date.now().toString();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `MB${timestamp.slice(-6)}${random.toUpperCase()}`;\n  }\n}\n\nexport const simpleStorage = new SimpleDatabaseStorage();","size_bytes":7051},"server/storage.ts":{"content":"import {\n  technicians,\n  services,\n  additionalServices,\n  bookings,\n  blockedTimeSlots,\n  adminUsers,\n  type Technician,\n  type Service,\n  type AdditionalService,\n  type Booking,\n  type BlockedTimeSlot,\n  type AdminUser,\n  type InsertTechnician,\n  type InsertService,\n  type InsertAdditionalService,\n  type InsertBooking,\n  type InsertBlockedTimeSlot,\n  type InsertAdminUser,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, like, desc, sql } from \"drizzle-orm\";\n// import { generateBookingQRCode } from \"../client/src/lib/qr-utils\";\n\nexport interface IStorage {\n  // Technicians\n  getTechnicians(): Promise<Technician[]>;\n  getTechnician(id: number): Promise<Technician | undefined>;\n  createTechnician(technician: InsertTechnician): Promise<Technician>;\n  updateTechnician(id: number, technician: Partial<InsertTechnician>): Promise<Technician>;\n  deleteTechnician(id: number): Promise<void>;\n\n  // Services\n  getServices(): Promise<Service[]>;\n  getService(id: number): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: number, service: Partial<InsertService>): Promise<Service>;\n  deleteService(id: number): Promise<void>;\n\n  // Additional Services\n  getAdditionalServices(): Promise<AdditionalService[]>;\n  getAdditionalService(id: number): Promise<AdditionalService | undefined>;\n  createAdditionalService(service: InsertAdditionalService): Promise<AdditionalService>;\n  updateAdditionalService(id: number, service: Partial<InsertAdditionalService>): Promise<AdditionalService>;\n  deleteAdditionalService(id: number): Promise<void>;\n\n  // Bookings\n  getBookings(): Promise<Booking[]>;\n  getBooking(id: number): Promise<Booking | undefined>;\n  getBookingByCode(code: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: number, booking: Partial<InsertBooking>): Promise<Booking>;\n  deleteBooking(id: number): Promise<void>;\n  getBookingsByDate(date: string): Promise<Booking[]>;\n  getBookingsByTechnician(technicianId: number, date?: string): Promise<Booking[]>;\n\n  // Blocked Time Slots\n  getBlockedTimeSlots(): Promise<BlockedTimeSlot[]>;\n  getBlockedTimeSlot(id: number): Promise<BlockedTimeSlot | undefined>;\n  createBlockedTimeSlot(slot: InsertBlockedTimeSlot): Promise<BlockedTimeSlot>;\n  updateBlockedTimeSlot(id: number, slot: Partial<InsertBlockedTimeSlot>): Promise<BlockedTimeSlot>;\n  deleteBlockedTimeSlot(id: number): Promise<void>;\n  getBlockedTimeSlotsByTechnician(technicianId: number, date?: string): Promise<BlockedTimeSlot[]>;\n\n  // Admin Users\n  getAdminUsers(): Promise<AdminUser[]>;\n  getAdminUser(id: number): Promise<AdminUser | undefined>;\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  updateAdminUser(id: number, user: Partial<InsertAdminUser>): Promise<AdminUser>;\n  deleteAdminUser(id: number): Promise<void>;\n\n  // Availability\n  getAvailableTimeSlots(date: string, duration: number): Promise<{ time: string; availableTechnicians: Technician[] }[]>;\n  getTechnicianAvailability(technicianId: number, date: string): Promise<string[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Technicians\n  async getTechnicians(): Promise<Technician[]> {\n    return await db.select().from(technicians).orderBy(technicians.name);\n  }\n\n  async getTechnician(id: number): Promise<Technician | undefined> {\n    const [technician] = await db.select().from(technicians).where(eq(technicians.id, id));\n    return technician;\n  }\n\n  async createTechnician(technician: InsertTechnician): Promise<Technician> {\n    const [newTechnician] = await db\n      .insert(technicians)\n      .values(technician)\n      .returning();\n    return newTechnician;\n  }\n\n  async updateTechnician(id: number, technician: Partial<InsertTechnician>): Promise<Technician> {\n    const [updatedTechnician] = await db\n      .update(technicians)\n      .set(technician)\n      .where(eq(technicians.id, id))\n      .returning();\n    return updatedTechnician;\n  }\n\n  async deleteTechnician(id: number): Promise<void> {\n    await db.delete(technicians).where(eq(technicians.id, id));\n  }\n\n  // Services\n  async getServices(): Promise<Service[]> {\n    return await db.select().from(services).orderBy(services.name);\n  }\n\n  async getService(id: number): Promise<Service | undefined> {\n    const [service] = await db.select().from(services).where(eq(services.id, id));\n    return service;\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const [newService] = await db\n      .insert(services)\n      .values(service)\n      .returning();\n    return newService;\n  }\n\n  async updateService(id: number, service: Partial<InsertService>): Promise<Service> {\n    const [updatedService] = await db\n      .update(services)\n      .set(service)\n      .where(eq(services.id, id))\n      .returning();\n    return updatedService;\n  }\n\n  async deleteService(id: number): Promise<void> {\n    await db.delete(services).where(eq(services.id, id));\n  }\n\n  // Additional Services\n  async getAdditionalServices(): Promise<AdditionalService[]> {\n    return await db.select().from(additionalServices).orderBy(additionalServices.name);\n  }\n\n  async getAdditionalService(id: number): Promise<AdditionalService | undefined> {\n    const [service] = await db.select().from(additionalServices).where(eq(additionalServices.id, id));\n    return service;\n  }\n\n  async createAdditionalService(service: InsertAdditionalService): Promise<AdditionalService> {\n    const [newService] = await db\n      .insert(additionalServices)\n      .values(service)\n      .returning();\n    return newService;\n  }\n\n  async updateAdditionalService(id: number, service: Partial<InsertAdditionalService>): Promise<AdditionalService> {\n    const [updatedService] = await db\n      .update(additionalServices)\n      .set(service)\n      .where(eq(additionalServices.id, id))\n      .returning();\n    return updatedService;\n  }\n\n  async deleteAdditionalService(id: number): Promise<void> {\n    await db.delete(additionalServices).where(eq(additionalServices.id, id));\n  }\n\n  // Bookings\n  async getBookings(): Promise<Booking[]> {\n    return await db.select().from(bookings).orderBy(desc(bookings.createdAt));\n  }\n\n  async getBooking(id: number): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking;\n  }\n\n  async getBookingByCode(code: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.bookingCode, code));\n    return booking;\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const bookingCode = this.generateBookingCode();\n    const qrCode = this.generateQRCode(bookingCode);\n    \n    const [newBooking] = await db\n      .insert(bookings)\n      .values({\n        ...booking,\n        bookingCode,\n        qrCode,\n      })\n      .returning();\n    \n    return newBooking;\n  }\n\n  async updateBooking(id: number, booking: Partial<InsertBooking>): Promise<Booking> {\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set(booking)\n      .where(eq(bookings.id, id))\n      .returning();\n    return updatedBooking;\n  }\n\n  async deleteBooking(id: number): Promise<void> {\n    await db.delete(bookings).where(eq(bookings.id, id));\n  }\n\n  async getBookingsByDate(date: string): Promise<Booking[]> {\n    const startDate = new Date(date);\n    const endDate = new Date(date);\n    endDate.setDate(endDate.getDate() + 1);\n    \n    return await db\n      .select()\n      .from(bookings)\n      .where(and(\n        gte(bookings.bookingDate, startDate),\n        lte(bookings.bookingDate, endDate)\n      ))\n      .orderBy(bookings.startTime);\n  }\n\n  async getBookingsByTechnician(technicianId: number, date?: string): Promise<Booking[]> {\n    let query = db.select().from(bookings).where(eq(bookings.technicianId, technicianId));\n    \n    if (date) {\n      const startDate = new Date(date);\n      const endDate = new Date(date);\n      endDate.setDate(endDate.getDate() + 1);\n      \n      query = db.select().from(bookings).where(and(\n        eq(bookings.technicianId, technicianId),\n        gte(bookings.bookingDate, startDate),\n        lte(bookings.bookingDate, endDate)\n      ));\n    }\n    \n    return await query.orderBy(bookings.startTime);\n  }\n\n  // Blocked Time Slots\n  async getBlockedTimeSlots(): Promise<BlockedTimeSlot[]> {\n    return await db.select().from(blockedTimeSlots).orderBy(desc(blockedTimeSlots.blockDate));\n  }\n\n  async getBlockedTimeSlot(id: number): Promise<BlockedTimeSlot | undefined> {\n    const [slot] = await db.select().from(blockedTimeSlots).where(eq(blockedTimeSlots.id, id));\n    return slot;\n  }\n\n  async createBlockedTimeSlot(slot: InsertBlockedTimeSlot): Promise<BlockedTimeSlot> {\n    const [newSlot] = await db\n      .insert(blockedTimeSlots)\n      .values(slot)\n      .returning();\n    return newSlot;\n  }\n\n  async updateBlockedTimeSlot(id: number, slot: Partial<InsertBlockedTimeSlot>): Promise<BlockedTimeSlot> {\n    const [updatedSlot] = await db\n      .update(blockedTimeSlots)\n      .set(slot)\n      .where(eq(blockedTimeSlots.id, id))\n      .returning();\n    return updatedSlot;\n  }\n\n  async deleteBlockedTimeSlot(id: number): Promise<void> {\n    await db.delete(blockedTimeSlots).where(eq(blockedTimeSlots.id, id));\n  }\n\n  async getBlockedTimeSlotsByTechnician(technicianId: number, date?: string): Promise<BlockedTimeSlot[]> {\n    let query = db.select().from(blockedTimeSlots).where(eq(blockedTimeSlots.technicianId, technicianId));\n    \n    if (date) {\n      const startDate = new Date(date);\n      const endDate = new Date(date);\n      endDate.setDate(endDate.getDate() + 1);\n      \n      query = db.select().from(blockedTimeSlots).where(and(\n        eq(blockedTimeSlots.technicianId, technicianId),\n        gte(blockedTimeSlots.blockDate, startDate),\n        lte(blockedTimeSlots.blockDate, endDate)\n      ));\n    }\n    \n    return await query.orderBy(blockedTimeSlots.startTime);\n  }\n\n  // Admin Users\n  async getAdminUsers(): Promise<AdminUser[]> {\n    return await db.select().from(adminUsers).orderBy(adminUsers.username);\n  }\n\n  async getAdminUser(id: number): Promise<AdminUser | undefined> {\n    const [user] = await db.select().from(adminUsers).where(eq(adminUsers.id, id));\n    return user;\n  }\n\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    const [user] = await db.select().from(adminUsers).where(eq(adminUsers.username, username));\n    return user;\n  }\n\n  async createAdminUser(user: InsertAdminUser): Promise<AdminUser> {\n    const [newUser] = await db\n      .insert(adminUsers)\n      .values(user)\n      .returning();\n    return newUser;\n  }\n\n  async updateAdminUser(id: number, user: Partial<InsertAdminUser>): Promise<AdminUser> {\n    const [updatedUser] = await db\n      .update(adminUsers)\n      .set(user)\n      .where(eq(adminUsers.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async deleteAdminUser(id: number): Promise<void> {\n    await db.delete(adminUsers).where(eq(adminUsers.id, id));\n  }\n\n  // Availability\n  async getAvailableTimeSlots(date: string, duration: number): Promise<{ time: string; availableTechnicians: Technician[] }[]> {\n    const allTechnicians = await this.getTechnicians();\n    const activeBookings = await this.getBookingsByDate(date);\n    const blockedSlots = await this.getBlockedTimeSlotsByDate(date);\n    \n    const operatingHours = this.generateOperatingHours();\n    const availableSlots: { time: string; availableTechnicians: Technician[] }[] = [];\n    \n    for (const time of operatingHours) {\n      const availableTechnicians: Technician[] = [];\n      \n      for (const technician of allTechnicians) {\n        if (technician.isActive && this.isTechnicianAvailable(\n          technician,\n          time,\n          duration,\n          activeBookings,\n          blockedSlots\n        )) {\n          availableTechnicians.push(technician);\n        }\n      }\n      \n      if (availableTechnicians.length > 0) {\n        availableSlots.push({ time, availableTechnicians });\n      }\n    }\n    \n    return availableSlots;\n  }\n\n  async getTechnicianAvailability(technicianId: number, date: string): Promise<string[]> {\n    const technician = await this.getTechnician(technicianId);\n    if (!technician || !technician.isActive) return [];\n    \n    const activeBookings = await this.getBookingsByTechnician(technicianId, date);\n    const blockedSlots = await this.getBlockedTimeSlotsByTechnician(technicianId, date);\n    \n    const operatingHours = this.generateOperatingHours();\n    const availableTimes: string[] = [];\n    \n    for (const time of operatingHours) {\n      if (this.isTechnicianAvailable(technician, time, 60, activeBookings, blockedSlots)) {\n        availableTimes.push(time);\n      }\n    }\n    \n    return availableTimes;\n  }\n\n  private async getBlockedTimeSlotsByDate(date: string): Promise<BlockedTimeSlot[]> {\n    const startDate = new Date(date);\n    const endDate = new Date(date);\n    endDate.setDate(endDate.getDate() + 1);\n    \n    return await db\n      .select()\n      .from(blockedTimeSlots)\n      .where(and(\n        gte(blockedTimeSlots.blockDate, startDate),\n        lte(blockedTimeSlots.blockDate, endDate)\n      ));\n  }\n\n  private generateOperatingHours(): string[] {\n    const hours = [];\n    for (let hour = 9; hour <= 21; hour++) {\n      for (let minute = 0; minute < 60; minute += 30) {\n        const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        hours.push(time);\n      }\n    }\n    return hours;\n  }\n\n  private isTechnicianAvailable(\n    technician: Technician,\n    startTime: string,\n    duration: number,\n    bookings: Booking[],\n    blockedSlots: BlockedTimeSlot[]\n  ): boolean {\n    const endTime = this.addMinutes(startTime, duration);\n    \n    // Check against existing bookings\n    for (const booking of bookings) {\n      if (booking.technicianId === technician.id && \n          this.hasTimeConflict(startTime, endTime, booking.startTime, booking.endTime)) {\n        return false;\n      }\n    }\n    \n    // Check against blocked time slots\n    for (const slot of blockedSlots) {\n      if (slot.technicianId === technician.id && \n          this.hasTimeConflict(startTime, endTime, slot.startTime, slot.endTime)) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n\n  private hasTimeConflict(start1: string, end1: string, start2: string, end2: string): boolean {\n    return start1 < end2 && end1 > start2;\n  }\n\n  private addMinutes(time: string, minutes: number): string {\n    const [hours, mins] = time.split(':').map(Number);\n    const totalMinutes = hours * 60 + mins + minutes;\n    const newHours = Math.floor(totalMinutes / 60);\n    const newMins = totalMinutes % 60;\n    return `${newHours.toString().padStart(2, '0')}:${newMins.toString().padStart(2, '0')}`;\n  }\n\n  private generateBookingCode(): string {\n    const timestamp = Date.now().toString();\n    const random = Math.random().toString(36).substring(2, 8);\n    return `MB${timestamp.slice(-6)}${random.toUpperCase()}`;\n  }\n\n  private generateQRCode(bookingCode: string): string {\n    // Generate QR code data for the booking code\n    const qrData = {\n      code: bookingCode,\n      timestamp: Date.now(),\n      type: 'booking'\n    };\n    return `MB-${bookingCode}-${qrData.timestamp}`;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":15516},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, json } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const technicians = pgTable(\"technicians\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  birthYear: integer(\"birth_year\").notNull(),\n  avatar: text(\"avatar\"),\n  photos: json(\"photos\").$type<string[]>().default([]),\n  notes: text(\"notes\"),\n  specialties: json(\"specialties\").$type<string[]>().default([]),\n  experience: integer(\"experience\").notNull(), // years\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default('0.0'),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const services = pgTable(\"services\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price45: integer(\"price_45\").notNull(), // price for 45 minutes in VND\n  price90: integer(\"price_90\").notNull(), // price for 90 minutes in VND\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const additionalServices = pgTable(\"additional_services\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  price: integer(\"price\").notNull(), // price in VND\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: serial(\"id\").primaryKey(),\n  bookingCode: text(\"booking_code\").notNull().unique(),\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  customerNotes: text(\"customer_notes\"),\n  technicianId: integer(\"technician_id\").references(() => technicians.id),\n  serviceId: integer(\"service_id\").references(() => services.id),\n  duration: integer(\"duration\").notNull(), // 45 or 90 minutes\n  additionalServiceIds: json(\"additional_service_ids\").$type<number[]>().default([]),\n  bookingDate: timestamp(\"booking_date\").notNull(),\n  startTime: text(\"start_time\").notNull(), // \"13:00\" format\n  endTime: text(\"end_time\").notNull(), // \"14:00\" format\n  totalAmount: integer(\"total_amount\").notNull(),\n  depositAmount: integer(\"deposit_amount\").notNull(),\n  isPaid: boolean(\"is_paid\").default(false),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, completed, cancelled\n  paymentMethod: text(\"payment_method\"), // bank_transfer, cash, etc.\n  qrCode: text(\"qr_code\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const blockedTimeSlots = pgTable(\"blocked_time_slots\", {\n  id: serial(\"id\").primaryKey(),\n  technicianId: integer(\"technician_id\").references(() => technicians.id),\n  blockDate: timestamp(\"block_date\").notNull(),\n  startTime: text(\"start_time\").notNull(),\n  endTime: text(\"end_time\").notNull(),\n  reason: text(\"reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const techniciansRelations = relations(technicians, ({ many }) => ({\n  bookings: many(bookings),\n  blockedTimeSlots: many(blockedTimeSlots),\n}));\n\nexport const servicesRelations = relations(services, ({ many }) => ({\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  technician: one(technicians, {\n    fields: [bookings.technicianId],\n    references: [technicians.id],\n  }),\n  service: one(services, {\n    fields: [bookings.serviceId],\n    references: [services.id],\n  }),\n}));\n\nexport const blockedTimeSlotsRelations = relations(blockedTimeSlots, ({ one }) => ({\n  technician: one(technicians, {\n    fields: [blockedTimeSlots.technicianId],\n    references: [technicians.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertTechnicianSchema = createInsertSchema(technicians).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n});\n\nexport const insertAdditionalServiceSchema = createInsertSchema(additionalServices).omit({\n  id: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  bookingCode: true,\n  qrCode: true,\n  createdAt: true,\n}).extend({\n  bookingDate: z.string().or(z.date()).transform((val) => {\n    return typeof val === 'string' ? new Date(val) : val;\n  }),\n});\n\nexport const insertBlockedTimeSlotSchema = createInsertSchema(blockedTimeSlots).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  blockDate: z.string().or(z.date()).transform((val) => {\n    return typeof val === 'string' ? new Date(val) : val;\n  }),\n});\n\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Technician = typeof technicians.$inferSelect;\nexport type InsertTechnician = z.infer<typeof insertTechnicianSchema>;\n\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\n\nexport type AdditionalService = typeof additionalServices.$inferSelect;\nexport type InsertAdditionalService = z.infer<typeof insertAdditionalServiceSchema>;\n\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\n\nexport type BlockedTimeSlot = typeof blockedTimeSlots.$inferSelect;\nexport type InsertBlockedTimeSlot = z.infer<typeof insertBlockedTimeSlotSchema>;\n\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\n","size_bytes":5717},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Admin from \"@/pages/admin\";\nimport BookingLookup from \"@/pages/booking-lookup\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/lookup\" component={BookingLookup} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":891},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(220, 13%, 95%);\n  --muted-foreground: hsl(220, 8.9%, 46.1%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(166, 66%, 45%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(45, 93%, 47%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(207, 90%, 54%);\n  --radius: 0.5rem;\n  \n  /* Spa-specific colors */\n  --spa-primary: hsl(207, 90%, 54%);\n  --spa-secondary: hsl(166, 66%, 45%);\n  --spa-accent: hsl(45, 93%, 47%);\n  --spa-neutral-100: hsl(220, 13%, 95%);\n  --spa-neutral-500: hsl(220, 8.9%, 46.1%);\n  --spa-neutral-600: hsl(220, 9%, 39%);\n  --spa-neutral-800: hsl(220, 13%, 18%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  /* Booking Flow Components */\n  .booking-flow-step {\n    @apply transition-all duration-300 ease-in-out;\n  }\n  \n  .booking-flow-step.active {\n    @apply transform -translate-y-0.5 shadow-lg;\n    box-shadow: 0 8px 25px rgba(37, 99, 235, 0.15);\n  }\n  \n  .service-card {\n    @apply transition-all duration-200 cursor-pointer;\n  }\n  \n  .service-card:hover {\n    @apply transform -translate-y-1 shadow-lg;\n  }\n  \n  .time-slot {\n    @apply transition-all duration-200 cursor-pointer;\n  }\n  \n  .time-slot:hover {\n    @apply bg-blue-50 border-primary;\n  }\n  \n  .time-slot.selected {\n    @apply bg-primary text-white border-primary;\n  }\n  \n  .time-slot.disabled {\n    @apply opacity-50 cursor-not-allowed;\n  }\n  \n  /* Mobile optimizations */\n  .floating-summary {\n    @apply fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200;\n    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);\n  }\n  \n  @media (min-width: 768px) {\n    .floating-summary {\n      @apply sticky top-5 float-right border border-gray-200 rounded-xl;\n      position: sticky;\n      width: 380px;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n    }\n  }\n  \n  /* Admin Panel Styles */\n  .admin-stat-card {\n    @apply bg-white p-4 rounded-lg shadow-sm border border-gray-200;\n  }\n  \n  .admin-stat-card .stat-icon {\n    @apply w-10 h-10 rounded-full flex items-center justify-center;\n  }\n  \n  .admin-stat-card .stat-value {\n    @apply text-2xl font-bold text-gray-900;\n  }\n  \n  .admin-stat-card .stat-label {\n    @apply text-sm text-gray-600;\n  }\n  \n  /* Technician Card */\n  .technician-card {\n    @apply bg-white p-4 rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow;\n  }\n  \n  .technician-avatar {\n    @apply w-12 h-12 rounded-full object-cover border-2 border-gray-200;\n  }\n  \n  .technician-rating {\n    @apply flex items-center space-x-1 text-sm text-gray-600;\n  }\n  \n  .specialty-badge {\n    @apply inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800;\n  }\n  \n  /* Booking Status Colors */\n  .status-confirmed {\n    @apply bg-green-100 text-green-800;\n  }\n  \n  .status-pending {\n    @apply bg-yellow-100 text-yellow-800;\n  }\n  \n  .status-cancelled {\n    @apply bg-red-100 text-red-800;\n  }\n  \n  /* QR Code Styles */\n  .qr-code-container {\n    @apply w-48 h-48 bg-gray-100 rounded-xl mx-auto flex items-center justify-center;\n  }\n  \n  .qr-code-placeholder {\n    @apply text-center text-gray-500;\n  }\n  \n  .qr-code-icon {\n    @apply w-16 h-16 mx-auto mb-2 text-gray-400;\n  }\n  \n  /* Payment Modal */\n  .payment-info-card {\n    @apply bg-gray-50 border border-gray-200 rounded-lg p-4;\n  }\n  \n  .payment-info-row {\n    @apply flex justify-between items-center py-1;\n  }\n  \n  .payment-amount {\n    @apply font-medium text-amber-600;\n  }\n  \n  /* Loading States */\n  .loading-spinner {\n    @apply animate-spin w-5 h-5;\n  }\n  \n  .loading-container {\n    @apply flex items-center justify-center py-8;\n  }\n  \n  /* Vietnamese Typography */\n  .vietnamese-text {\n    font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;\n    @apply text-gray-900;\n  }\n  \n  .vietnamese-heading {\n    @apply font-bold text-gray-900;\n  }\n  \n  .vietnamese-subheading {\n    @apply font-medium text-gray-700;\n  }\n  \n  /* Responsive Design */\n  @media (max-width: 768px) {\n    .mobile-padding {\n      @apply px-4;\n    }\n    \n    .mobile-grid {\n      @apply grid-cols-1;\n    }\n    \n    .mobile-hidden {\n      @apply hidden;\n    }\n    \n    .mobile-full {\n      @apply w-full;\n    }\n  }\n  \n  /* Accessibility */\n  .focus-visible {\n    @apply outline-none ring-2 ring-primary ring-offset-2;\n  }\n  \n  .sr-only {\n    @apply absolute w-px h-px p-0 -m-px overflow-hidden whitespace-nowrap border-0;\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n  \n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(207, 90%, 64%) 100%);\n  }\n  \n  .gradient-secondary {\n    background: linear-gradient(135deg, hsl(166, 66%, 45%) 0%, hsl(166, 66%, 55%) 100%);\n  }\n  \n  .shadow-soft {\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n  }\n  \n  .shadow-medium {\n    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);\n  }\n  \n  .border-soft {\n    border-color: hsl(220, 13%, 91%);\n  }\n}\n","size_bytes":6243},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { \n  Users, \n  Calendar, \n  Clock, \n  Plus, \n  Edit2, \n  Trash2, \n  Star,\n  User,\n  CalendarX,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Loader2,\n  Search,\n  Filter,\n  Eye\n} from \"lucide-react\";\n\nexport default function AdminPanel() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTechnician, setSelectedTechnician] = useState<number | null>(null);\n  const [showTechnicianDialog, setShowTechnicianDialog] = useState(false);\n  const [showBlockDialog, setShowBlockDialog] = useState(false);\n  const [editingTechnician, setEditingTechnician] = useState<any>(null);\n  const [bookingFilters, setBookingFilters] = useState({\n    search: '',\n    technician: 'all',\n    status: 'all',\n    dateFrom: '',\n    dateTo: ''\n  });\n  const [selectedBooking, setSelectedBooking] = useState<any>(null);\n  const [showBookingDetails, setShowBookingDetails] = useState(false);\n\n  // WebSocket connection for real-time updates\n  const handleWebSocketMessage = (data: any) => {\n    if (data.type === 'booking_created' || data.type === 'booking_updated') {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/availability'] });\n    }\n  };\n\n  useWebSocket('/ws', {\n    onMessage: handleWebSocketMessage,\n  });\n\n  // Fetch data\n  const { data: technicians, isLoading: techniciansLoading } = useQuery({\n    queryKey: ['/api/technicians'],\n    queryFn: async () => {\n      const response = await fetch('/api/technicians');\n      if (!response.ok) throw new Error('Failed to fetch technicians');\n      return response.json();\n    },\n  });\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery({\n    queryKey: ['/api/bookings'],\n    queryFn: async () => {\n      const response = await fetch('/api/bookings');\n      if (!response.ok) throw new Error('Failed to fetch bookings');\n      return response.json();\n    },\n  });\n\n  const { data: blockedSlots, isLoading: blockedSlotsLoading } = useQuery({\n    queryKey: ['/api/blocked-time-slots'],\n    queryFn: async () => {\n      const response = await fetch('/api/blocked-time-slots');\n      if (!response.ok) throw new Error('Failed to fetch blocked slots');\n      return response.json();\n    },\n  });\n\n  // Mutations\n  const createTechnicianMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/technicians', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/technicians'] });\n      setShowTechnicianDialog(false);\n      setEditingTechnician(null);\n      toast({\n        title: \"Thành công\",\n        description: \"Đã thêm kỹ thuật viên mới\",\n      });\n    },\n  });\n\n  const updateTechnicianMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await apiRequest('PUT', `/api/technicians/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/technicians'] });\n      setShowTechnicianDialog(false);\n      setEditingTechnician(null);\n      toast({\n        title: \"Thành công\",\n        description: \"Đã cập nhật thông tin kỹ thuật viên\",\n      });\n    },\n  });\n\n  const deleteTechnicianMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest('DELETE', `/api/technicians/${id}`);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/technicians'] });\n      toast({\n        title: \"Thành công\",\n        description: \"Đã xóa kỹ thuật viên\",\n      });\n    },\n  });\n\n  const blockTimeSlotMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/blocked-time-slots', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/blocked-time-slots'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/availability'] });\n      setShowBlockDialog(false);\n      toast({\n        title: \"Thành công\",\n        description: \"Đã block thời gian thành công\",\n      });\n    },\n  });\n\n  const unblockTimeSlotMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest('DELETE', `/api/blocked-time-slots/${id}`);\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/blocked-time-slots'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/availability'] });\n      toast({\n        title: \"Thành công\",\n        description: \"Đã bỏ block thời gian\",\n      });\n    },\n  });\n\n  const updateBookingMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: any }) => {\n      const response = await apiRequest('PUT', `/api/bookings/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      toast({\n        title: \"Thành công\",\n        description: \"Đã cập nhật trạng thái đặt lịch\",\n      });\n    },\n  });\n\n  // Form handlers\n  const handleTechnicianSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const data = {\n      name: formData.get('name') as string,\n      birthYear: parseInt(formData.get('birthYear') as string),\n      experience: parseInt(formData.get('experience') as string),\n      specialties: (formData.get('specialties') as string).split(',').map(s => s.trim()),\n      notes: formData.get('notes') as string,\n      avatar: formData.get('avatar') as string,\n    };\n\n    if (editingTechnician) {\n      updateTechnicianMutation.mutate({ id: editingTechnician.id, data });\n    } else {\n      createTechnicianMutation.mutate(data);\n    }\n  };\n\n  const handleBlockTimeSlot = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    const data = {\n      technicianId: parseInt(formData.get('technicianId') as string),\n      blockDate: new Date(formData.get('blockDate') as string),\n      startTime: formData.get('startTime') as string,\n      endTime: formData.get('endTime') as string,\n      reason: formData.get('reason') as string,\n    };\n\n    blockTimeSlotMutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('vi-VN', {\n      style: 'currency',\n      currency: 'VND',\n    }).format(amount);\n  };\n\n  const formatDateTime = (dateString: string) => {\n    return new Date(dateString).toLocaleString('vi-VN');\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'Đã xác nhận';\n      case 'pending':\n        return 'Chờ xác nhận';\n      case 'cancelled':\n        return 'Đã hủy';\n      default:\n        return status;\n    }\n  };\n\n  const todayBookings = Array.isArray(bookings) ? bookings.filter((booking: any) => {\n    const bookingDate = new Date(booking.bookingDate);\n    const today = new Date();\n    return bookingDate.toDateString() === today.toDateString();\n  }) : [];\n\n  const filteredBookings = Array.isArray(bookings) ? bookings.filter((booking: any) => {\n    const searchMatch = !bookingFilters.search || \n      booking.customerName?.toLowerCase().includes(bookingFilters.search.toLowerCase()) ||\n      booking.customerPhone?.includes(bookingFilters.search) ||\n      booking.bookingCode?.toLowerCase().includes(bookingFilters.search.toLowerCase());\n    \n    const technicianMatch = !bookingFilters.technician || bookingFilters.technician === 'all' || \n      booking.technicianId?.toString() === bookingFilters.technician;\n    \n    const statusMatch = !bookingFilters.status || bookingFilters.status === 'all' || \n      booking.status === bookingFilters.status;\n    \n    const dateMatch = (!bookingFilters.dateFrom || new Date(booking.bookingDate) >= new Date(bookingFilters.dateFrom)) &&\n                     (!bookingFilters.dateTo || new Date(booking.bookingDate) <= new Date(bookingFilters.dateTo));\n    \n    return searchMatch && technicianMatch && statusMatch && dateMatch;\n  }) : [];\n\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Kỹ thuật viên</p>\n                <p className=\"text-2xl font-bold\">{Array.isArray(technicians) ? technicians.length : 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Lịch hẹn hôm nay</p>\n                <p className=\"text-2xl font-bold\">{todayBookings.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <CalendarX className=\"h-5 w-5 text-red-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Thời gian bị block</p>\n                <p className=\"text-2xl font-bold\">{Array.isArray(blockedSlots) ? blockedSlots.length : 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <AlertCircle className=\"h-5 w-5 text-amber-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">Chờ xác nhận</p>\n                <p className=\"text-2xl font-bold\">\n                  {Array.isArray(bookings) ? bookings.filter((b: any) => b.status === 'pending').length : 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"technicians\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"technicians\">Kỹ thuật viên</TabsTrigger>\n          <TabsTrigger value=\"bookings\">Lịch đặt hôm nay</TabsTrigger>\n          <TabsTrigger value=\"all-bookings\">Tất cả lịch đặt</TabsTrigger>\n          <TabsTrigger value=\"schedule\">Quản lý lịch</TabsTrigger>\n        </TabsList>\n\n        {/* Technicians Tab */}\n        <TabsContent value=\"technicians\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Quản lý kỹ thuật viên</h3>\n            <Dialog open={showTechnicianDialog} onOpenChange={setShowTechnicianDialog}>\n              <DialogTrigger asChild>\n                <Button onClick={() => setEditingTechnician(null)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Thêm kỹ thuật viên\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingTechnician ? 'Cập nhật kỹ thuật viên' : 'Thêm kỹ thuật viên mới'}\n                  </DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleTechnicianSubmit} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"name\">Tên kỹ thuật viên</Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      defaultValue={editingTechnician?.name || ''}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"birthYear\">Năm sinh</Label>\n                    <Input\n                      id=\"birthYear\"\n                      name=\"birthYear\"\n                      type=\"number\"\n                      defaultValue={editingTechnician?.birthYear || ''}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"experience\">Kinh nghiệm (năm)</Label>\n                    <Input\n                      id=\"experience\"\n                      name=\"experience\"\n                      type=\"number\"\n                      defaultValue={editingTechnician?.experience || ''}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"specialties\">Chuyên môn (phân cách bằng dấu phẩy)</Label>\n                    <Input\n                      id=\"specialties\"\n                      name=\"specialties\"\n                      defaultValue={editingTechnician?.specialties?.join(', ') || ''}\n                      placeholder=\"Massage Thái, Massage toàn thân\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"avatar\">URL ảnh đại diện</Label>\n                    <Input\n                      id=\"avatar\"\n                      name=\"avatar\"\n                      defaultValue={editingTechnician?.avatar || ''}\n                      placeholder=\"https://example.com/avatar.jpg\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"notes\">Ghi chú</Label>\n                    <Textarea\n                      id=\"notes\"\n                      name=\"notes\"\n                      defaultValue={editingTechnician?.notes || ''}\n                      placeholder=\"Ghi chú về kỹ thuật viên...\"\n                    />\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button type=\"submit\" disabled={createTechnicianMutation.isPending || updateTechnicianMutation.isPending}>\n                      {(createTechnicianMutation.isPending || updateTechnicianMutation.isPending) && (\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      )}\n                      {editingTechnician ? 'Cập nhật' : 'Thêm'}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowTechnicianDialog(false)}\n                    >\n                      Hủy\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {techniciansLoading ? (\n              <div className=\"col-span-2 flex items-center justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : Array.isArray(technicians) ? (\n              technicians.map((technician: any) => (\n                <Card key={technician.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center space-x-3 mb-3\">\n                      {technician.avatar && (\n                        <img\n                          src={technician.avatar}\n                          alt={technician.name}\n                          className=\"w-12 h-12 rounded-full object-cover\"\n                        />\n                      )}\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium\">{technician.name}</h4>\n                        <p className=\"text-sm text-gray-500\">\n                          Năm sinh: {technician.birthYear} • {technician.experience} năm kinh nghiệm\n                        </p>\n                        <div className=\"flex items-center space-x-1 mt-1\">\n                          <Star className=\"h-3 w-3 text-yellow-400 fill-current\" />\n                          <span className=\"text-sm text-gray-600\">{technician.rating}</span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setEditingTechnician(technician);\n                            setShowTechnicianDialog(true);\n                          }}\n                        >\n                          <Edit2 className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => deleteTechnicianMutation.mutate(technician.id)}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    {technician.specialties && technician.specialties.length > 0 && (\n                      <div className=\"mb-2\">\n                        <p className=\"text-sm text-gray-600\">Chuyên môn:</p>\n                        <div className=\"flex flex-wrap gap-1 mt-1\">\n                          {technician.specialties.map((specialty: string, index: number) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                              {specialty}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                    {technician.notes && (\n                      <p className=\"text-sm text-gray-600\">{technician.notes}</p>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <div className=\"col-span-2 text-center py-4 text-gray-500\">\n                Không có kỹ thuật viên nào\n              </div>\n            )}\n          </div>\n        </TabsContent>\n\n        {/* Bookings Tab */}\n        <TabsContent value=\"bookings\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Lịch đặt hôm nay</h3>\n          </div>\n\n          <div className=\"space-y-4\">\n            {bookingsLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : todayBookings?.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Chưa có lịch đặt nào hôm nay</p>\n                </CardContent>\n              </Card>\n            ) : (\n              todayBookings?.map((booking: any) => (\n                <Card key={booking.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <User className=\"h-5 w-5 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium\">{booking.customerName}</h4>\n                          <p className=\"text-sm text-gray-500\">{booking.customerPhone}</p>\n                        </div>\n                      </div>\n                      <Badge className={getStatusColor(booking.status)}>\n                        {getStatusText(booking.status)}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Thời gian:</p>\n                        <p className=\"font-medium\">{booking.startTime} - {booking.endTime}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Kỹ thuật viên:</p>\n                        <p className=\"font-medium\">\n                          {Array.isArray(technicians) ? technicians.find((t: any) => t.id === booking.technicianId)?.name || 'N/A' : 'N/A'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Mã đặt lịch:</p>\n                        <p className=\"font-medium\">{booking.bookingCode}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Tổng tiền:</p>\n                        <p className=\"font-medium\">{formatCurrency(booking.totalAmount)}</p>\n                      </div>\n                    </div>\n\n                    {booking.status === 'pending' && (\n                      <div className=\"flex space-x-2 mt-4\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => updateBookingMutation.mutate({\n                            id: booking.id,\n                            data: { status: 'confirmed' }\n                          })}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Xác nhận\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => updateBookingMutation.mutate({\n                            id: booking.id,\n                            data: { status: 'cancelled' }\n                          })}\n                        >\n                          <XCircle className=\"h-4 w-4 mr-1\" />\n                          Hủy\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </TabsContent>\n\n        {/* All Bookings Tab */}\n        <TabsContent value=\"all-bookings\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-lg font-semibold\">Tất cả lịch đặt</h3>\n          </div>\n\n          {/* Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Filter className=\"h-5 w-5\" />\n                <span>Bộ lọc</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"search\">Tìm kiếm</Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                    <Input\n                      id=\"search\"\n                      placeholder=\"Tên, SĐT, mã đặt lịch...\"\n                      value={bookingFilters.search}\n                      onChange={(e) => setBookingFilters({...bookingFilters, search: e.target.value})}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"technician-filter\">Kỹ thuật viên</Label>\n                  <Select\n                    value={bookingFilters.technician}\n                    onValueChange={(value) => setBookingFilters({...bookingFilters, technician: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Tất cả kỹ thuật viên\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tất cả kỹ thuật viên</SelectItem>\n                      {Array.isArray(technicians) ? technicians.map((tech: any) => (\n                        <SelectItem key={tech.id} value={tech.id.toString()}>\n                          {tech.name}\n                        </SelectItem>\n                      )) : null}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"status-filter\">Trạng thái</Label>\n                  <Select\n                    value={bookingFilters.status}\n                    onValueChange={(value) => setBookingFilters({...bookingFilters, status: value})}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Tất cả trạng thái\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tất cả trạng thái</SelectItem>\n                      <SelectItem value=\"pending\">Chờ xác nhận</SelectItem>\n                      <SelectItem value=\"confirmed\">Đã xác nhận</SelectItem>\n                      <SelectItem value=\"cancelled\">Đã hủy</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"date-from\">Từ ngày</Label>\n                  <Input\n                    id=\"date-from\"\n                    type=\"date\"\n                    value={bookingFilters.dateFrom}\n                    onChange={(e) => setBookingFilters({...bookingFilters, dateFrom: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"date-to\">Đến ngày</Label>\n                  <Input\n                    id=\"date-to\"\n                    type=\"date\"\n                    value={bookingFilters.dateTo}\n                    onChange={(e) => setBookingFilters({...bookingFilters, dateTo: e.target.value})}\n                  />\n                </div>\n                <div className=\"flex items-end\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setBookingFilters({search: '', technician: 'all', status: 'all', dateFrom: '', dateTo: ''})}\n                    className=\"w-full\"\n                  >\n                    Xóa bộ lọc\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Bookings List */}\n          <div className=\"space-y-4\">\n            {bookingsLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : filteredBookings.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Không tìm thấy lịch đặt nào</p>\n                </CardContent>\n              </Card>\n            ) : (\n              filteredBookings.map((booking: any) => (\n                <Card key={booking.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <User className=\"h-6 w-6 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-lg\">{booking.customerName}</h4>\n                          <p className=\"text-sm text-gray-500\">{booking.customerPhone}</p>\n                          <p className=\"text-xs text-gray-400\">Mã: {booking.bookingCode}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge className={getStatusColor(booking.status)}>\n                          {getStatusText(booking.status)}\n                        </Badge>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedBooking(booking);\n                            setShowBookingDetails(true);\n                          }}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600 font-medium\">Ngày & Giờ:</p>\n                        <p className=\"font-medium\">{formatDateTime(booking.bookingDate)}</p>\n                        <p className=\"text-sm\">{booking.startTime} - {booking.endTime}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600 font-medium\">Kỹ thuật viên:</p>\n                        <p className=\"font-medium\">\n                          {Array.isArray(technicians) ? technicians.find((t: any) => t.id === booking.technicianId)?.name || 'N/A' : 'N/A'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600 font-medium\">Thời gian massage:</p>\n                        <p className=\"font-medium\">{booking.duration} phút</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600 font-medium\">Tổng tiền:</p>\n                        <p className=\"font-medium text-lg text-green-600\">{formatCurrency(booking.totalAmount)}</p>\n                        <p className=\"text-xs text-gray-500\">Cọc: {formatCurrency(booking.depositAmount)}</p>\n                      </div>\n                    </div>\n\n                    {booking.customerNotes && (\n                      <div className=\"mt-3 p-2 bg-gray-50 rounded\">\n                        <p className=\"text-sm text-gray-600\"><strong>Ghi chú:</strong> {booking.customerNotes}</p>\n                      </div>\n                    )}\n\n                    {booking.status === 'pending' && (\n                      <div className=\"flex space-x-2 mt-4\">\n                        <Button\n                          size=\"sm\"\n                          onClick={() => updateBookingMutation.mutate({\n                            id: booking.id,\n                            data: { status: 'confirmed' }\n                          })}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Xác nhận\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => updateBookingMutation.mutate({\n                            id: booking.id,\n                            data: { status: 'cancelled' }\n                          })}\n                        >\n                          <XCircle className=\"h-4 w-4 mr-1\" />\n                          Hủy\n                        </Button>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n\n          {/* Booking Details Dialog */}\n          <Dialog open={showBookingDetails} onOpenChange={setShowBookingDetails}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Chi tiết đặt lịch - {selectedBooking?.bookingCode}</DialogTitle>\n              </DialogHeader>\n              {selectedBooking && (\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-medium mb-2\">Thông tin khách hàng</h4>\n                      <div className=\"space-y-1 text-sm\">\n                        <p><strong>Tên:</strong> {selectedBooking.customerName}</p>\n                        <p><strong>SĐT:</strong> {selectedBooking.customerPhone}</p>\n                        {selectedBooking.customerNotes && (\n                          <p><strong>Ghi chú:</strong> {selectedBooking.customerNotes}</p>\n                        )}\n                      </div>\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium mb-2\">Thông tin dịch vụ</h4>\n                      <div className=\"space-y-1 text-sm\">\n                        <p><strong>Ngày:</strong> {formatDateTime(selectedBooking.bookingDate)}</p>\n                        <p><strong>Giờ:</strong> {selectedBooking.startTime} - {selectedBooking.endTime}</p>\n                        <p><strong>Thời gian:</strong> {selectedBooking.duration} phút</p>\n                        <p><strong>Kỹ thuật viên:</strong> {Array.isArray(technicians) ? technicians.find((t: any) => t.id === selectedBooking.technicianId)?.name || 'N/A' : 'N/A'}</p>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Thanh toán</h4>\n                    <div className=\"space-y-1 text-sm\">\n                      <p><strong>Tổng tiền:</strong> {formatCurrency(selectedBooking.totalAmount)}</p>\n                      <p><strong>Tiền cọc:</strong> {formatCurrency(selectedBooking.depositAmount)}</p>\n                      <p><strong>Trạng thái thanh toán:</strong> {selectedBooking.isPaid ? 'Đã thanh toán' : 'Chưa thanh toán'}</p>\n                      <p><strong>Phương thức:</strong> {selectedBooking.paymentMethod || 'N/A'}</p>\n                    </div>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Trạng thái</h4>\n                    <Badge className={getStatusColor(selectedBooking.status)}>\n                      {getStatusText(selectedBooking.status)}\n                    </Badge>\n                  </div>\n                </div>\n              )}\n            </DialogContent>\n          </Dialog>\n        </TabsContent>\n\n        {/* Schedule Tab */}\n        <TabsContent value=\"schedule\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Block Time Slot */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CalendarX className=\"h-5 w-5\" />\n                  <span>Block thời gian</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Dialog open={showBlockDialog} onOpenChange={setShowBlockDialog}>\n                  <DialogTrigger asChild>\n                    <Button className=\"w-full\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Block thời gian mới\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Block thời gian</DialogTitle>\n                    </DialogHeader>\n                    <form onSubmit={handleBlockTimeSlot} className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"technicianId\">Kỹ thuật viên</Label>\n                        <Select name=\"technicianId\" required>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Chọn kỹ thuật viên\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Array.isArray(technicians) ? technicians.map((tech: any) => (\n                              <SelectItem key={tech.id} value={tech.id.toString()}>\n                                {tech.name}\n                              </SelectItem>\n                            )) : null}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"blockDate\">Ngày</Label>\n                        <Input\n                          id=\"blockDate\"\n                          name=\"blockDate\"\n                          type=\"date\"\n                          required\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"startTime\">Từ</Label>\n                          <Input\n                            id=\"startTime\"\n                            name=\"startTime\"\n                            type=\"time\"\n                            required\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"endTime\">Đến</Label>\n                          <Input\n                            id=\"endTime\"\n                            name=\"endTime\"\n                            type=\"time\"\n                            required\n                          />\n                        </div>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"reason\">Lý do</Label>\n                        <Textarea\n                          id=\"reason\"\n                          name=\"reason\"\n                          placeholder=\"Lý do block thời gian...\"\n                        />\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button type=\"submit\" disabled={blockTimeSlotMutation.isPending}>\n                          {blockTimeSlotMutation.isPending && (\n                            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          )}\n                          Block\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setShowBlockDialog(false)}\n                        >\n                          Hủy\n                        </Button>\n                      </div>\n                    </form>\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n\n            {/* Blocked Time Slots */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-5 w-5\" />\n                  <span>Thời gian đã block</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                  {blockedSlotsLoading ? (\n                    <div className=\"flex items-center justify-center py-4\">\n                      <Loader2 className=\"h-5 w-5 animate-spin\" />\n                    </div>\n                  ) : !Array.isArray(blockedSlots) || blockedSlots.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-4\">\n                      Chưa có thời gian nào bị block\n                    </p>\n                  ) : (\n                    blockedSlots.map((slot: any) => (\n                      <div\n                        key={slot.id}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">\n                            {Array.isArray(technicians) ? technicians.find((t: any) => t.id === slot.technicianId)?.name || 'N/A' : 'N/A'}\n                          </p>\n                          <p className=\"text-sm text-gray-600\">\n                            {formatDateTime(slot.blockDate)} • {slot.startTime} - {slot.endTime}\n                          </p>\n                          {slot.reason && (\n                            <p className=\"text-xs text-gray-500 mt-1\">{slot.reason}</p>\n                          )}\n                        </div>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => unblockTimeSlotMutation.mutate(slot.id)}\n                        >\n                          <XCircle className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":42338},"client/src/components/booking-flow.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Clock, User, Check } from \"lucide-react\";\nimport ServiceSelection from \"./service-selection\";\nimport TimeSlotPicker from \"./time-slot-picker\";\nimport TechnicianSelection from \"./technician-selection\";\n\ninterface BookingFlowProps {\n  bookingData: any;\n  onBookingDataChange: (data: any) => void;\n}\n\nexport default function BookingFlow({ bookingData, onBookingDataChange }: BookingFlowProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n\n  const steps = [\n    { number: 1, title: \"Chọn cách đặt lịch\", completed: currentStep > 1 },\n    { number: 2, title: \"Chọn dịch vụ\", completed: currentStep > 2 },\n    { number: 3, title: \"Thông tin khách hàng\", completed: currentStep > 3 },\n  ];\n\n  const handleMethodChange = (method: string) => {\n    onBookingDataChange({ ...bookingData, method });\n  };\n\n  const handleCustomerInfoChange = (field: string, value: string) => {\n    onBookingDataChange({\n      ...bookingData,\n      customerInfo: {\n        ...bookingData.customerInfo,\n        [field]: value,\n      },\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Progress Steps */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            {steps.map((step, index) => (\n              <div key={step.number} className=\"flex items-center\">\n                <div className=\"flex items-center space-x-2\">\n                  <div\n                    className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                      step.completed\n                        ? \"bg-green-500 text-white\"\n                        : currentStep === step.number\n                        ? \"bg-primary text-white\"\n                        : \"bg-gray-200 text-gray-500\"\n                    }`}\n                  >\n                    {step.completed ? <Check className=\"h-4 w-4\" /> : step.number}\n                  </div>\n                  <span\n                    className={`text-sm font-medium ${\n                      step.completed || currentStep === step.number\n                        ? \"text-primary\"\n                        : \"text-gray-500\"\n                    }`}\n                  >\n                    {step.title}\n                  </span>\n                </div>\n                {index < steps.length - 1 && (\n                  <div className=\"flex-1 h-0.5 bg-gray-200 mx-4\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Step 1: Booking Method */}\n      {currentStep === 1 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Chọn cách đặt lịch</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div\n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  bookingData.method === \"time\"\n                    ? \"border-primary bg-primary/5\"\n                    : \"border-gray-200 hover:border-primary\"\n                }`}\n                onClick={() => handleMethodChange(\"time\")}\n              >\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <Clock className=\"text-primary text-lg\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Theo giờ còn trống</h4>\n                    <p className=\"text-sm text-gray-500\">Chọn khung giờ phù hợp</p>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Xem tất cả khung giờ còn trống và lựa chọn kỹ thuật viên phù hợp\n                </p>\n              </div>\n\n              <div\n                className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${\n                  bookingData.method === \"technician\"\n                    ? \"border-primary bg-primary/5\"\n                    : \"border-gray-200 hover:border-primary\"\n                }`}\n                onClick={() => handleMethodChange(\"technician\")}\n              >\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"w-12 h-12 bg-secondary/10 rounded-full flex items-center justify-center\">\n                    <User className=\"text-secondary text-lg\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Theo kỹ thuật viên</h4>\n                    <p className=\"text-sm text-gray-500\">Chọn kỹ thuật viên yêu thích</p>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Chọn kỹ thuật viên trước, sau đó xem lịch trống của họ\n                </p>\n              </div>\n            </div>\n\n            <div className=\"mt-6 flex justify-end\">\n              <Button\n                onClick={() => setCurrentStep(2)}\n                disabled={!bookingData.method}\n              >\n                Tiếp theo\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Step 2: Service Selection & Time/Technician */}\n      {currentStep === 2 && (\n        <div className=\"space-y-6\">\n          {/* Time/Technician Selection */}\n          {bookingData.method === \"time\" ? (\n            <TimeSlotPicker\n              bookingData={bookingData}\n              onBookingDataChange={onBookingDataChange}\n            />\n          ) : (\n            <TechnicianSelection\n              bookingData={bookingData}\n              onBookingDataChange={onBookingDataChange}\n            />\n          )}\n\n          {/* Service Selection */}\n          <ServiceSelection\n            bookingData={bookingData}\n            onBookingDataChange={onBookingDataChange}\n          />\n\n          <div className=\"flex justify-between\">\n            <Button variant=\"outline\" onClick={() => setCurrentStep(1)}>\n              Quay lại\n            </Button>\n            <Button\n              onClick={() => setCurrentStep(3)}\n              disabled={!bookingData.selectedService || !bookingData.selectedTime || !bookingData.selectedTechnician}\n            >\n              Tiếp theo\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Step 3: Customer Information */}\n      {currentStep === 3 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Thông tin khách hàng</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"customerName\">Họ và tên *</Label>\n                <Input\n                  id=\"customerName\"\n                  type=\"text\"\n                  value={bookingData.customerInfo.name}\n                  onChange={(e) => handleCustomerInfoChange(\"name\", e.target.value)}\n                  placeholder=\"Nhập họ và tên\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"customerPhone\">Số điện thoại *</Label>\n                <Input\n                  id=\"customerPhone\"\n                  type=\"tel\"\n                  value={bookingData.customerInfo.phone}\n                  onChange={(e) => handleCustomerInfoChange(\"phone\", e.target.value)}\n                  placeholder=\"Nhập số điện thoại\"\n                  required\n                />\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"customerNotes\">Ghi chú</Label>\n                <Textarea\n                  id=\"customerNotes\"\n                  value={bookingData.customerInfo.notes}\n                  onChange={(e) => handleCustomerInfoChange(\"notes\", e.target.value)}\n                  placeholder=\"Ghi chú về yêu cầu đặc biệt (không bắt buộc)\"\n                  rows={3}\n                />\n              </div>\n            </div>\n\n            <div className=\"mt-6 flex justify-start\">\n              <Button variant=\"outline\" onClick={() => setCurrentStep(2)}>\n                Quay lại\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8691},"client/src/components/booking-summary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, User, Clock, MapPin } from \"lucide-react\";\n\ninterface BookingSummaryProps {\n  bookingData: any;\n  onSubmit: () => void;\n}\n\nexport default function BookingSummary({ bookingData, onSubmit }: BookingSummaryProps) {\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('vi-VN', {\n      style: 'currency',\n      currency: 'VND',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('vi-VN', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const calculateEndTime = (startTime: string, duration: number) => {\n    const [hours, minutes] = startTime.split(':').map(Number);\n    const endMinutes = hours * 60 + minutes + duration;\n    const endHours = Math.floor(endMinutes / 60);\n    const endMins = endMinutes % 60;\n    return `${endHours.toString().padStart(2, '0')}:${endMins.toString().padStart(2, '0')}`;\n  };\n\n  const isFormValid = bookingData.selectedService && \n                     bookingData.selectedTechnician && \n                     bookingData.selectedTime &&\n                     bookingData.customerInfo.name &&\n                     bookingData.customerInfo.phone;\n\n  return (\n    <Card className=\"sticky top-6\">\n      <CardHeader>\n        <CardTitle>Tóm tắt đặt lịch</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Booking Details */}\n        {bookingData.selectedDate && bookingData.selectedTime && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-3\">\n              <Calendar className=\"h-5 w-5 text-primary\" />\n              <div>\n                <div className=\"font-medium\">\n                  {formatDate(bookingData.selectedDate)}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  {bookingData.selectedTime} - {calculateEndTime(bookingData.selectedTime, bookingData.selectedDuration)}\n                </div>\n              </div>\n            </div>\n            \n            {bookingData.selectedTechnician && (\n              <div className=\"flex items-center space-x-3\">\n                <User className=\"h-5 w-5 text-primary\" />\n                <div>\n                  <div className=\"font-medium\">{bookingData.selectedTechnician.name}</div>\n                  <div className=\"text-sm text-gray-500\">Kỹ thuật viên</div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Service Details */}\n        {bookingData.selectedService && (\n          <>\n            <Separator />\n            <div>\n              <h4 className=\"font-medium mb-3\">Dịch vụ đã chọn</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm\">\n                    {bookingData.selectedService.name} ({bookingData.selectedDuration} phút)\n                  </span>\n                  <span className=\"text-sm font-medium\">\n                    {formatCurrency(\n                      bookingData.selectedDuration === 45 \n                        ? bookingData.selectedService.price45 \n                        : bookingData.selectedService.price90\n                    )}\n                  </span>\n                </div>\n                \n                {bookingData.additionalServices.map((service: any) => (\n                  <div key={service.id} className=\"flex justify-between\">\n                    <span className=\"text-sm\">{service.name}</span>\n                    <span className=\"text-sm font-medium\">{formatCurrency(service.price)}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Total and Deposit */}\n        {bookingData.totalAmount > 0 && (\n          <>\n            <Separator />\n            <div>\n              <div className=\"flex justify-between mb-2\">\n                <span className=\"font-medium\">Tổng cộng</span>\n                <span className=\"font-medium\">{formatCurrency(bookingData.totalAmount)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm text-gray-600\">\n                <span>Cần đặt cọc (20%)</span>\n                <span className=\"font-medium text-amber-600\">\n                  {formatCurrency(bookingData.depositAmount)}\n                </span>\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Customer Info */}\n        {bookingData.customerInfo.name && (\n          <>\n            <Separator />\n            <div>\n              <h4 className=\"font-medium mb-2\">Thông tin khách hàng</h4>\n              <div className=\"space-y-1 text-sm\">\n                <p><strong>Tên:</strong> {bookingData.customerInfo.name}</p>\n                <p><strong>SĐT:</strong> {bookingData.customerInfo.phone}</p>\n                {bookingData.customerInfo.notes && (\n                  <p><strong>Ghi chú:</strong> {bookingData.customerInfo.notes}</p>\n                )}\n              </div>\n            </div>\n          </>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"space-y-3 pt-4\">\n          <Button \n            className=\"w-full\" \n            onClick={onSubmit}\n            disabled={!isFormValid}\n          >\n            Đặt lịch ngay\n          </Button>\n          {!isFormValid && (\n            <p className=\"text-sm text-gray-500 text-center\">\n              Vui lòng điền đầy đủ thông tin để đặt lịch\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5844},"client/src/components/payment-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CreditCard, Check, QrCode, Copy } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PaymentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  bookingData: any;\n}\n\nexport default function PaymentModal({ isOpen, onClose, bookingData }: PaymentModalProps) {\n  const [step, setStep] = useState<'payment' | 'verification' | 'success'>('payment');\n  const [booking, setBooking] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/bookings', data);\n      return response.json();\n    },\n    onSuccess: (newBooking) => {\n      setBooking(newBooking);\n      setStep('verification');\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/availability'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể tạo đặt lịch. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyPaymentMutation = useMutation({\n    mutationFn: async (bookingId: number) => {\n      const response = await apiRequest('POST', `/api/bookings/${bookingId}/verify-payment`, {});\n      return response.json();\n    },\n    onSuccess: (result) => {\n      if (result.success) {\n        setBooking(result.booking);\n        setStep('success');\n        toast({\n          title: \"Thành công\",\n          description: \"Đặt lịch thành công! Cảm ơn bạn đã sử dụng dịch vụ.\",\n        });\n      } else {\n        toast({\n          title: \"Lỗi\",\n          description: \"Không thể xác thực thanh toán. Vui lòng thử lại.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể xác thực thanh toán. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateBooking = () => {\n    const bookingPayload = {\n      customerName: bookingData.customerInfo.name,\n      customerPhone: bookingData.customerInfo.phone,\n      customerNotes: bookingData.customerInfo.notes || '',\n      technicianId: parseInt(bookingData.selectedTechnician.id),\n      serviceId: parseInt(bookingData.selectedService.id),\n      duration: parseInt(bookingData.selectedDuration),\n      additionalServiceIds: bookingData.additionalServices?.map((s: any) => parseInt(s.id)) || [],\n      bookingDate: new Date(bookingData.selectedDate + 'T00:00:00.000Z'),\n      startTime: bookingData.selectedTime,\n      endTime: calculateEndTime(bookingData.selectedTime, bookingData.selectedDuration),\n      totalAmount: parseInt(bookingData.totalAmount),\n      depositAmount: parseInt(bookingData.depositAmount),\n      status: 'pending',\n    };\n\n    console.log('Sending booking payload:', bookingPayload);\n    createBookingMutation.mutate(bookingPayload);\n  };\n\n  const calculateEndTime = (startTime: string, duration: number) => {\n    const [hours, minutes] = startTime.split(':').map(Number);\n    const totalMinutes = hours * 60 + minutes + duration;\n    const endHours = Math.floor(totalMinutes / 60);\n    const endMins = totalMinutes % 60;\n    return `${endHours.toString().padStart(2, '0')}:${endMins.toString().padStart(2, '0')}`;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('vi-VN', {\n      style: 'currency',\n      currency: 'VND',\n    }).format(amount);\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Đã sao chép\",\n      description: \"Thông tin đã được sao chép vào clipboard\",\n    });\n  };\n\n  const handleClose = () => {\n    setStep('payment');\n    setBooking(null);\n    onClose();\n  };\n\n  const handleCloseWithRefresh = () => {\n    setStep('payment');\n    setBooking(null);\n    onClose();\n    // Refresh the page to update all data\n    window.location.reload();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md\">\n        {step === 'payment' && (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                <span>Thanh toán đặt cọc</span>\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-center text-gray-600\">\n                Vui lòng chuyển khoản để hoàn tất đặt lịch\n              </p>\n              \n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-medium mb-3\">Thông tin chuyển khoản</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Ngân hàng:</span>\n                      <span className=\"font-medium\">Vietcombank</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Số tài khoản:</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">0123456789</span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard('0123456789')}\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Chủ tài khoản:</span>\n                      <span className=\"font-medium\">Spa Relaxation</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Số tiền:</span>\n                      <span className=\"font-medium text-amber-600\">\n                        {formatCurrency(bookingData.depositAmount)}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"text-center\">\n                <div className=\"w-48 h-48 bg-gray-100 rounded-xl mx-auto flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <QrCode className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-500\">Mã QR thanh toán</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  className=\"flex-1\"\n                  onClick={handleCreateBooking}\n                  disabled={createBookingMutation.isPending}\n                >\n                  {createBookingMutation.isPending ? \"Đang xử lý...\" : \"Tạo đặt lịch\"}\n                </Button>\n                <Button variant=\"outline\" className=\"flex-1\" onClick={handleClose}>\n                  Hủy\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {step === 'verification' && booking && (\n          <>\n            <DialogHeader>\n              <DialogTitle>Xác thực thanh toán</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-medium mb-3\">Thông tin đặt lịch</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Mã đặt lịch:</span>\n                      <span className=\"font-medium\">{booking.bookingCode}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Số tiền cọc:</span>\n                      <span className=\"font-medium text-amber-600\">\n                        {formatCurrency(booking.depositAmount)}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-medium mb-3\">Thông tin chuyển khoản</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Ngân hàng:</span>\n                      <span className=\"font-medium\">Vietcombank</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Số tài khoản:</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-medium\">0123456789</span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => copyToClipboard('0123456789')}\n                        >\n                          <Copy className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Chủ tài khoản:</span>\n                      <span className=\"font-medium\">Spa Relaxation</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Số tiền:</span>\n                      <span className=\"font-medium text-amber-600\">\n                        {formatCurrency(booking.depositAmount)}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"text-center\">\n                <div className=\"w-48 h-48 bg-gray-100 rounded-xl mx-auto flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <QrCode className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-500\">Mã QR thanh toán</p>\n                  </div>\n                </div>\n              </div>\n\n              <p className=\"text-center text-gray-600\">\n                Vui lòng chuyển khoản theo thông tin trên và nhấn \"Đã chuyển khoản\" để xác nhận.\n              </p>\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  className=\"flex-1\"\n                  onClick={() => verifyPaymentMutation.mutate(booking.id)}\n                  disabled={verifyPaymentMutation.isPending}\n                >\n                  {verifyPaymentMutation.isPending ? \"Đang xác thực...\" : \"Đã chuyển khoản\"}\n                </Button>\n                <Button variant=\"outline\" className=\"flex-1\" onClick={handleCloseWithRefresh}>\n                  Hủy\n                </Button>\n              </div>\n            </div>\n          </>\n        )}\n\n        {step === 'success' && booking && (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <Check className=\"h-5 w-5 text-green-500\" />\n                <span>Đặt lịch thành công!</span>\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-center text-gray-600\">\n                Cảm ơn bạn đã đặt lịch. Vui lòng đến đúng giờ.\n              </p>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h4 className=\"font-medium mb-3\">Thông tin đặt lịch</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Mã đặt lịch:</span>\n                      <span className=\"font-medium\">{booking.bookingCode}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Ngày giờ:</span>\n                      <span className=\"font-medium\">\n                        {new Date(booking.bookingDate).toLocaleDateString('vi-VN')} - {booking.startTime}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Thời gian massage:</span>\n                      <span className=\"font-medium\">{booking.startTime} - {booking.endTime} ({booking.duration} phút)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Kỹ thuật viên:</span>\n                      <span className=\"font-medium\">{bookingData.selectedTechnician.name}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Dịch vụ:</span>\n                      <span className=\"font-medium\">{bookingData.selectedService.name}</span>\n                    </div>\n                    {bookingData.additionalServices && bookingData.additionalServices.length > 0 && (\n                      <div className=\"flex justify-between\">\n                        <span>Dịch vụ thêm:</span>\n                        <span className=\"font-medium\">{bookingData.additionalServices.map((s: any) => s.name).join(', ')}</span>\n                      </div>\n                    )}\n                    <div className=\"border-t pt-2 mt-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Tổng tiền:</span>\n                        <span className=\"font-medium\">{formatCurrency(booking.totalAmount)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Đã cọc:</span>\n                        <span className=\"font-medium text-green-600\">{formatCurrency(booking.depositAmount)}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Còn lại:</span>\n                        <span className=\"font-medium text-amber-600\">{formatCurrency(booking.totalAmount - booking.depositAmount)}</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"text-center\">\n                <div className=\"w-48 h-48 bg-gray-100 rounded-xl mx-auto flex items-center justify-center mb-4\">\n                  <div className=\"text-center\">\n                    <QrCode className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-sm text-gray-500\">Mã QR đặt lịch</p>\n                  </div>\n                </div>\n              </div>\n\n              <Button className=\"w-full\" onClick={handleCloseWithRefresh}>\n                Hoàn tất\n              </Button>\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15508},"client/src/components/qr-scanner.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { QrCode, Camera, Search } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface QRScannerProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function QRScanner({ isOpen, onClose }: QRScannerProps) {\n  const [bookingCode, setBookingCode] = useState(\"\");\n\n  const handleLookup = () => {\n    if (bookingCode.trim()) {\n      // Navigate to booking lookup page with the code\n      window.location.href = `/lookup?code=${bookingCode.trim()}`;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <QrCode className=\"h-5 w-5\" />\n            <span>Tra cứu đặt lịch</span>\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <p className=\"text-center text-gray-600\">\n            Quét mã QR hoặc nhập mã đặt lịch\n          </p>\n\n          <div className=\"text-center\">\n            <div className=\"w-48 h-48 bg-gray-100 rounded-xl mx-auto flex items-center justify-center mb-4\">\n              <div className=\"text-center\">\n                <Camera className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-sm text-gray-500\">Camera quét QR</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bookingCode\">Hoặc nhập mã đặt lịch</Label>\n            <Input\n              id=\"bookingCode\"\n              type=\"text\"\n              value={bookingCode}\n              onChange={(e) => setBookingCode(e.target.value.toUpperCase())}\n              placeholder=\"Nhập mã đặt lịch\"\n            />\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              className=\"flex-1\"\n              onClick={handleLookup}\n              disabled={!bookingCode.trim()}\n            >\n              <Search className=\"h-4 w-4 mr-2\" />\n              Tra cứu\n            </Button>\n            <Button variant=\"outline\" className=\"flex-1\" onClick={onClose}>\n              Đóng\n            </Button>\n          </div>\n\n          <div className=\"text-center\">\n            <Button variant=\"link\" asChild>\n              <Link href=\"/lookup\">Hoặc đi đến trang tra cứu</Link>\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2727},"client/src/components/service-selection.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ServiceSelectionProps {\n  bookingData: any;\n  onBookingDataChange: (data: any) => void;\n}\n\nexport default function ServiceSelection({ bookingData, onBookingDataChange }: ServiceSelectionProps) {\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: ['services'],\n    queryFn: async () => {\n      const response = await fetch('/api/services');\n      if (!response.ok) throw new Error('Failed to fetch services');\n      return response.json();\n    },\n  });\n\n  const { data: additionalServices, isLoading: additionalLoading } = useQuery({\n    queryKey: ['additional-services'],\n    queryFn: async () => {\n      const response = await fetch('/api/additional-services');\n      if (!response.ok) throw new Error('Failed to fetch additional services');\n      return response.json();\n    },\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('vi-VN', {\n      style: 'currency',\n      currency: 'VND',\n    }).format(amount);\n  };\n\n  const handleServiceChange = (service: any) => {\n    const basePrice = bookingData.selectedDuration === 45 ? service.price45 : service.price90;\n    const additionalPrice = bookingData.additionalServices.reduce((sum: number, add: any) => sum + add.price, 0);\n    const totalAmount = basePrice + additionalPrice;\n    const depositAmount = Math.round(totalAmount * 0.2);\n\n    onBookingDataChange({\n      ...bookingData,\n      selectedService: service,\n      totalAmount,\n      depositAmount,\n    });\n  };\n\n  const handleDurationChange = (duration: number) => {\n    onBookingDataChange({\n      ...bookingData,\n      selectedDuration: duration,\n      selectedTime: \"\",\n      selectedTechnician: null,\n    });\n    \n    if (bookingData.selectedService) {\n      const basePrice = duration === 45 ? bookingData.selectedService.price45 : bookingData.selectedService.price90;\n      const additionalPrice = bookingData.additionalServices.reduce((sum: number, add: any) => sum + add.price, 0);\n      const totalAmount = basePrice + additionalPrice;\n      const depositAmount = Math.round(totalAmount * 0.2);\n\n      onBookingDataChange({\n        ...bookingData,\n        selectedDuration: duration,\n        totalAmount,\n        depositAmount,\n      });\n    }\n  };\n\n  const handleAdditionalServiceChange = (service: any, checked: boolean) => {\n    let newAdditionalServices;\n    \n    if (checked) {\n      newAdditionalServices = [...bookingData.additionalServices, service];\n    } else {\n      newAdditionalServices = bookingData.additionalServices.filter((s: any) => s.id !== service.id);\n    }\n\n    const basePrice = bookingData.selectedService \n      ? (bookingData.selectedDuration === 45 ? bookingData.selectedService.price45 : bookingData.selectedService.price90)\n      : 0;\n    const additionalPrice = newAdditionalServices.reduce((sum: number, add: any) => sum + add.price, 0);\n    const totalAmount = basePrice + additionalPrice;\n    const depositAmount = Math.round(totalAmount * 0.2);\n\n    onBookingDataChange({\n      ...bookingData,\n      additionalServices: newAdditionalServices,\n      totalAmount,\n      depositAmount,\n    });\n  };\n\n  if (servicesLoading || additionalLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"h-6 w-6 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Chọn dịch vụ</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Main Services */}\n        <div>\n          <h4 className=\"font-medium mb-4\">Dịch vụ chính</h4>\n          <RadioGroup\n            value={bookingData.selectedService?.id?.toString() || \"\"}\n            onValueChange={(value) => {\n              const service = services?.find((s: any) => s.id.toString() === value);\n              if (service) handleServiceChange(service);\n            }}\n          >\n            <div className=\"space-y-4\">\n              {services?.map((service: any) => (\n                <div key={service.id} className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value={service.id.toString()} id={service.id.toString()} />\n                    <Label htmlFor={service.id.toString()} className=\"flex-1\">\n                      <div className=\"font-medium\">{service.name}</div>\n                      <div className=\"text-sm text-gray-500\">{service.description}</div>\n                    </Label>\n                  </div>\n                  \n                  {bookingData.selectedService?.id === service.id && (\n                    <div className=\"ml-6 space-y-2\">\n                      <div className=\"flex space-x-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"radio\"\n                            id={`${service.id}-45`}\n                            name=\"duration\"\n                            checked={bookingData.selectedDuration === 45}\n                            onChange={() => handleDurationChange(45)}\n                            className=\"w-4 h-4 text-primary\"\n                          />\n                          <Label htmlFor={`${service.id}-45`} className=\"text-sm\">\n                            45 phút - {formatCurrency(service.price45)}\n                          </Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"radio\"\n                            id={`${service.id}-90`}\n                            name=\"duration\"\n                            checked={bookingData.selectedDuration === 90}\n                            onChange={() => handleDurationChange(90)}\n                            className=\"w-4 h-4 text-primary\"\n                          />\n                          <Label htmlFor={`${service.id}-90`} className=\"text-sm\">\n                            90 phút - {formatCurrency(service.price90)}\n                          </Label>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </RadioGroup>\n        </div>\n\n        {/* Additional Services */}\n        <div>\n          <h4 className=\"font-medium mb-3\">Dịch vụ đi kèm</h4>\n          <div className=\"space-y-2\">\n            {additionalServices?.map((service: any) => (\n              <div key={service.id} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`additional-${service.id}`}\n                  checked={bookingData.additionalServices.some((s: any) => s.id === service.id)}\n                  onCheckedChange={(checked) => handleAdditionalServiceChange(service, !!checked)}\n                />\n                <Label htmlFor={`additional-${service.id}`} className=\"text-sm\">\n                  {service.name} (+{formatCurrency(service.price)})\n                </Label>\n              </div>\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7524},"client/src/components/technician-selection.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Loader2, Star } from \"lucide-react\";\n\ninterface TechnicianSelectionProps {\n  bookingData: any;\n  onBookingDataChange: (data: any) => void;\n}\n\nexport default function TechnicianSelection({ bookingData, onBookingDataChange }: TechnicianSelectionProps) {\n  const { data: technicians, isLoading: techniciansLoading } = useQuery({\n    queryKey: ['/api/technicians'],\n  });\n\n  const { data: availability, isLoading: availabilityLoading } = useQuery({\n    queryKey: ['/api/technicians', bookingData.selectedTechnician?.id, 'availability', bookingData.selectedDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/technicians/${bookingData.selectedTechnician.id}/availability?date=${bookingData.selectedDate}`);\n      if (!response.ok) throw new Error('Failed to fetch availability');\n      return response.json();\n    },\n    enabled: !!bookingData.selectedTechnician?.id && !!bookingData.selectedDate,\n  });\n\n  const generateDateOptions = () => {\n    const options = [];\n    const today = new Date();\n    \n    for (let i = 0; i < 7; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + i);\n      options.push({\n        date: date,\n        dateString: date.toISOString().split('T')[0],\n        displayText: i === 0 ? 'Hôm nay' : i === 1 ? 'Ngày mai' : date.toLocaleDateString('vi-VN'),\n      });\n    }\n    \n    return options;\n  };\n\n  const dateOptions = generateDateOptions();\n\n  const handleTechnicianSelect = (technician: any) => {\n    onBookingDataChange({\n      ...bookingData,\n      selectedTechnician: technician,\n      selectedTime: \"\",\n    });\n  };\n\n  const handleDateSelect = (dateString: string) => {\n    onBookingDataChange({\n      ...bookingData,\n      selectedDate: dateString,\n      selectedTime: \"\",\n    });\n  };\n\n  const handleTimeSelect = (time: string) => {\n    onBookingDataChange({\n      ...bookingData,\n      selectedTime: time,\n    });\n  };\n\n  if (techniciansLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"h-6 w-6 animate-spin\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Chọn kỹ thuật viên</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Technician Selection */}\n        <div>\n          <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Chọn kỹ thuật viên</Label>\n          <div className=\"space-y-3\">\n            {technicians && Array.isArray(technicians) ? technicians.map((technician: any) => (\n              <div\n                key={technician.id}\n                className={`flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-all ${\n                  bookingData.selectedTechnician?.id === technician.id\n                    ? \"border-primary bg-primary/5\"\n                    : \"border-gray-200 hover:border-primary\"\n                }`}\n                onClick={() => handleTechnicianSelect(technician)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"technician\"\n                  checked={bookingData.selectedTechnician?.id === technician.id}\n                  onChange={() => handleTechnicianSelect(technician)}\n                  className=\"w-4 h-4 text-primary\"\n                />\n                <div className=\"flex items-center space-x-3 flex-1\">\n                  {technician.avatar && (\n                    <img\n                      src={technician.avatar}\n                      alt={technician.name}\n                      className=\"w-12 h-12 rounded-full object-cover\"\n                    />\n                  )}\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{technician.name}</div>\n                    <div className=\"text-sm text-gray-500\">\n                      {technician.experience} năm kinh nghiệm • {technician.rating}★\n                    </div>\n                    {technician.specialties && technician.specialties.length > 0 && (\n                      <div className=\"text-xs text-gray-400\">\n                        Chuyên môn: {technician.specialties.join(', ')}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )) : (\n              <div className=\"text-center py-4 text-gray-500\">\n                Không có kỹ thuật viên nào\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Date Selection */}\n        {bookingData.selectedTechnician && (\n          <div>\n            <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Chọn ngày</Label>\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\n              {dateOptions.map((option) => (\n                <button\n                  key={option.dateString}\n                  onClick={() => handleDateSelect(option.dateString)}\n                  className={`text-center p-3 rounded-lg border-2 transition-all ${\n                    bookingData.selectedDate === option.dateString\n                      ? \"border-primary bg-primary text-white\"\n                      : \"border-gray-200 hover:border-primary\"\n                  }`}\n                >\n                  <div className=\"text-sm font-medium\">{option.displayText}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Time Slots */}\n        {bookingData.selectedTechnician && bookingData.selectedDate && (\n          <div>\n            <Label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Giờ còn trống của {bookingData.selectedTechnician.name}\n            </Label>\n            {availabilityLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3\">\n                {availability && Array.isArray(availability) && availability.length > 0 ? availability.map((time: string) => (\n                  <button\n                    key={time}\n                    onClick={() => handleTimeSelect(time)}\n                    className={`text-center p-3 rounded-lg border transition-all ${\n                      bookingData.selectedTime === time\n                        ? \"border-primary bg-primary text-white\"\n                        : \"border-gray-200 hover:border-primary hover:bg-blue-50\"\n                    }`}\n                  >\n                    <div className=\"font-medium\">{time}</div>\n                  </button>\n                )) : (\n                  <div className=\"col-span-full text-center py-4 text-gray-500\">\n                    Không có khung giờ trống\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7283},"client/src/components/time-slot-picker.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Loader2, ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface TimeSlotPickerProps {\n  bookingData: any;\n  onBookingDataChange: (data: any) => void;\n}\n\nexport default function TimeSlotPicker({ bookingData, onBookingDataChange }: TimeSlotPickerProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const { data: availability, isLoading } = useQuery({\n    queryKey: ['availability', bookingData.selectedDate, bookingData.selectedDuration],\n    queryFn: async () => {\n      const response = await fetch(`/api/availability/${bookingData.selectedDate}/${bookingData.selectedDuration}`);\n      if (!response.ok) throw new Error('Failed to fetch availability');\n      return response.json();\n    },\n    enabled: !!bookingData.selectedDate && !!bookingData.selectedDuration,\n  });\n\n  const formatDate = (date: Date) => {\n    return date.toISOString().split('T')[0];\n  };\n\n  const generateWeekDays = () => {\n    const days = [];\n    const today = new Date();\n    \n    for (let i = 0; i < 7; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + i);\n      days.push({\n        date: date,\n        dateString: formatDate(date),\n        dayName: date.toLocaleDateString('vi-VN', { weekday: 'short' }),\n        dayNumber: date.getDate(),\n      });\n    }\n    \n    return days;\n  };\n\n  const weekDays = generateWeekDays();\n\n  const handleDateSelect = (dateString: string) => {\n    onBookingDataChange({\n      ...bookingData,\n      selectedDate: dateString,\n      selectedTime: \"\",\n      selectedTechnician: null,\n    });\n  };\n\n  const handleTimeSelect = (time: string, availableTechnicians: any[]) => {\n    onBookingDataChange({\n      ...bookingData,\n      selectedTime: time,\n      availableTechnicians,\n      selectedTechnician: availableTechnicians.length === 1 ? availableTechnicians[0] : null,\n    });\n  };\n\n  const handleTechnicianSelect = (technician: any) => {\n    onBookingDataChange({\n      ...bookingData,\n      selectedTechnician: technician,\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Chọn ngày và giờ</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Date Selection */}\n        <div>\n          <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Chọn ngày</Label>\n          <div className=\"grid grid-cols-7 gap-2\">\n            {weekDays.map((day) => (\n              <button\n                key={day.dateString}\n                onClick={() => handleDateSelect(day.dateString)}\n                className={`text-center p-3 rounded-lg border-2 transition-all ${\n                  bookingData.selectedDate === day.dateString\n                    ? \"border-primary bg-primary text-white\"\n                    : \"border-gray-200 hover:border-primary\"\n                }`}\n              >\n                <div className=\"text-xs\">{day.dayName}</div>\n                <div className=\"font-medium\">{day.dayNumber}</div>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Time Slots */}\n        {bookingData.selectedDate && (\n          <div>\n            <Label className=\"block text-sm font-medium text-gray-700 mb-2\">Khung giờ còn trống</Label>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3\">\n                {availability && Array.isArray(availability) && availability.length > 0 ? availability.map((slot: any) => (\n                  <button\n                    key={slot.time}\n                    onClick={() => handleTimeSelect(slot.time, slot.availableTechnicians)}\n                    className={`text-center p-3 rounded-lg border transition-all ${\n                      bookingData.selectedTime === slot.time\n                        ? \"border-primary bg-primary text-white\"\n                        : \"border-gray-200 hover:border-primary hover:bg-blue-50\"\n                    }`}\n                  >\n                    <div className=\"font-medium\">{slot.time}</div>\n                    <div className=\"text-xs text-gray-500\">\n                      {slot.availableTechnicians.length} KTV\n                    </div>\n                  </button>\n                )) : (\n                  <div className=\"col-span-full text-center py-4 text-gray-500\">\n                    Không có khung giờ trống\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Technician Selection */}\n        {bookingData.selectedTime && bookingData.availableTechnicians && bookingData.availableTechnicians.length > 1 && (\n          <div>\n            <Label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Chọn kỹ thuật viên ({bookingData.selectedTime})\n            </Label>\n            <div className=\"space-y-3\">\n              {bookingData.availableTechnicians.map((technician: any) => (\n                <div\n                  key={technician.id}\n                  className={`flex items-center space-x-3 p-3 rounded-lg border cursor-pointer transition-all ${\n                    bookingData.selectedTechnician?.id === technician.id\n                      ? \"border-primary bg-primary/5\"\n                      : \"border-gray-200 hover:border-primary\"\n                  }`}\n                  onClick={() => handleTechnicianSelect(technician)}\n                >\n                  <input\n                    type=\"radio\"\n                    name=\"technician\"\n                    checked={bookingData.selectedTechnician?.id === technician.id}\n                    onChange={() => handleTechnicianSelect(technician)}\n                    className=\"w-4 h-4 text-primary\"\n                  />\n                  <div className=\"flex items-center space-x-3 flex-1\">\n                    {technician.avatar && (\n                      <img\n                        src={technician.avatar}\n                        alt={technician.name}\n                        className=\"w-10 h-10 rounded-full object-cover\"\n                      />\n                    )}\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{technician.name}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {technician.experience} năm kinh nghiệm • {technician.rating}★\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6974},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { WebSocketConnection } from '@/lib/websocket';\n\ninterface UseWebSocketOptions {\n  onMessage?: (data: any) => void;\n  onOpen?: () => void;\n  onClose?: () => void;\n  onError?: (error: Event) => void;\n  autoConnect?: boolean;\n}\n\nexport function useWebSocket(path: string, options: UseWebSocketOptions = {}) {\n  const {\n    onMessage,\n    onOpen,\n    onClose,\n    onError,\n    autoConnect = true,\n  } = options;\n\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<Event | null>(null);\n  const wsRef = useRef<WebSocketConnection | null>(null);\n\n  useEffect(() => {\n    if (!autoConnect) return;\n\n    // Create WebSocket connection\n    wsRef.current = new WebSocketConnection(path);\n\n    // Set up event handlers\n    wsRef.current.onOpen(() => {\n      setIsConnected(true);\n      setError(null);\n      onOpen?.();\n    });\n\n    wsRef.current.onClose(() => {\n      setIsConnected(false);\n      onClose?.();\n    });\n\n    wsRef.current.onError((error) => {\n      setError(error);\n      setIsConnected(false);\n      onError?.(error);\n    });\n\n    if (onMessage) {\n      wsRef.current.onMessage(onMessage);\n    }\n\n    // Connect\n    wsRef.current.connect().catch((error) => {\n      console.error('Failed to connect to WebSocket:', error);\n      setError(error);\n    });\n\n    // Cleanup on unmount\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.disconnect();\n        wsRef.current = null;\n      }\n    };\n  }, [path, autoConnect]); // Remove callback dependencies to prevent loops\n\n  const sendMessage = (data: any) => {\n    if (wsRef.current && wsRef.current.isConnected()) {\n      wsRef.current.send(data);\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  };\n\n  const connect = () => {\n    if (wsRef.current) {\n      wsRef.current.connect().catch((error) => {\n        console.error('Failed to connect to WebSocket:', error);\n        setError(error);\n      });\n    }\n  };\n\n  const disconnect = () => {\n    if (wsRef.current) {\n      wsRef.current.disconnect();\n    }\n  };\n\n  return {\n    isConnected,\n    error,\n    sendMessage,\n    connect,\n    disconnect,\n  };\n}\n","size_bytes":2199},"client/src/lib/qr-utils.ts":{"content":"export interface QRCodeOptions {\n  width?: number;\n  height?: number;\n  color?: string;\n  backgroundColor?: string;\n}\n\nexport class QRCodeGenerator {\n  static generateQRCodeDataURL(text: string, options: QRCodeOptions = {}): string {\n    const {\n      width = 200,\n      height = 200,\n      color = '#000000',\n      backgroundColor = '#ffffff'\n    } = options;\n\n    // Create a canvas element\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    if (!ctx) {\n      throw new Error('Could not get canvas context');\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    // Fill background\n    ctx.fillStyle = backgroundColor;\n    ctx.fillRect(0, 0, width, height);\n\n    // Simple QR code pattern (placeholder implementation)\n    // In a real application, you would use a proper QR code library\n    ctx.fillStyle = color;\n    \n    // Create a simple pattern to represent QR code\n    const blockSize = Math.floor(width / 21); // Standard QR code is 21x21 modules\n    const offset = (width - blockSize * 21) / 2;\n\n    // Draw finder patterns (corners)\n    this.drawFinderPattern(ctx, offset, offset, blockSize);\n    this.drawFinderPattern(ctx, offset + blockSize * 14, offset, blockSize);\n    this.drawFinderPattern(ctx, offset, offset + blockSize * 14, blockSize);\n\n    // Draw timing patterns\n    for (let i = 0; i < 21; i++) {\n      if (i % 2 === 0) {\n        ctx.fillRect(offset + i * blockSize, offset + 6 * blockSize, blockSize, blockSize);\n        ctx.fillRect(offset + 6 * blockSize, offset + i * blockSize, blockSize, blockSize);\n      }\n    }\n\n    // Draw data pattern (simplified)\n    const hash = this.simpleHash(text);\n    for (let i = 0; i < 21; i++) {\n      for (let j = 0; j < 21; j++) {\n        if (this.shouldFillBlock(i, j, hash)) {\n          ctx.fillRect(offset + i * blockSize, offset + j * blockSize, blockSize, blockSize);\n        }\n      }\n    }\n\n    return canvas.toDataURL();\n  }\n\n  private static drawFinderPattern(ctx: CanvasRenderingContext2D, x: number, y: number, blockSize: number): void {\n    // Draw 7x7 finder pattern\n    for (let i = 0; i < 7; i++) {\n      for (let j = 0; j < 7; j++) {\n        if (\n          (i === 0 || i === 6 || j === 0 || j === 6) ||\n          (i >= 2 && i <= 4 && j >= 2 && j <= 4)\n        ) {\n          ctx.fillRect(x + i * blockSize, y + j * blockSize, blockSize, blockSize);\n        }\n      }\n    }\n  }\n\n  private static simpleHash(text: string): number {\n    let hash = 0;\n    for (let i = 0; i < text.length; i++) {\n      const char = text.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  private static shouldFillBlock(i: number, j: number, hash: number): boolean {\n    // Skip finder patterns and timing patterns\n    if (\n      (i < 9 && j < 9) || // Top-left finder\n      (i > 12 && j < 9) || // Top-right finder\n      (i < 9 && j > 12) || // Bottom-left finder\n      (i === 6 || j === 6) // Timing patterns\n    ) {\n      return false;\n    }\n\n    // Simple pattern based on hash\n    return ((i + j + hash) % 3) === 0;\n  }\n\n  static generateBookingQRCode(bookingCode: string): string {\n    const qrData = {\n      type: 'booking',\n      code: bookingCode,\n      timestamp: Date.now(),\n    };\n\n    return this.generateQRCodeDataURL(JSON.stringify(qrData), {\n      width: 200,\n      height: 200,\n      color: '#2563EB',\n      backgroundColor: '#ffffff',\n    });\n  }\n\n  static parseBookingQRCode(qrData: string): { code: string; timestamp: number } | null {\n    try {\n      const parsed = JSON.parse(qrData);\n      if (parsed.type === 'booking' && parsed.code) {\n        return {\n          code: parsed.code,\n          timestamp: parsed.timestamp,\n        };\n      }\n    } catch (error) {\n      console.error('Error parsing QR code data:', error);\n    }\n    return null;\n  }\n}\n\nexport const generateBookingQRCode = (bookingCode: string): string => {\n  return QRCodeGenerator.generateBookingQRCode(bookingCode);\n};\n\nexport const parseBookingQRCode = (qrData: string) => {\n  return QRCodeGenerator.parseBookingQRCode(qrData);\n};\n","size_bytes":4148},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"export class WebSocketConnection {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n  private onMessageCallbacks: ((data: any) => void)[] = [];\n  private onOpenCallbacks: (() => void)[] = [];\n  private onCloseCallbacks: (() => void)[] = [];\n  private onErrorCallbacks: ((error: Event) => void)[] = [];\n\n  constructor(path: string) {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    this.url = `${protocol}//${window.location.host}${path}`;\n  }\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.ws = new WebSocket(this.url);\n\n        this.ws.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          this.onOpenCallbacks.forEach(callback => callback());\n          resolve();\n        };\n\n        this.ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            this.onMessageCallbacks.forEach(callback => callback(data));\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        this.ws.onclose = () => {\n          console.log('WebSocket disconnected');\n          this.onCloseCallbacks.forEach(callback => callback());\n          this.attemptReconnect();\n        };\n\n        this.ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          this.onErrorCallbacks.forEach(callback => callback(error));\n          reject(error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private attemptReconnect(): void {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      \n      setTimeout(() => {\n        this.connect().catch(error => {\n          console.error('Reconnection failed:', error);\n        });\n      }, this.reconnectDelay * this.reconnectAttempts);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  send(data: any): void {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  }\n\n  onMessage(callback: (data: any) => void): void {\n    this.onMessageCallbacks.push(callback);\n  }\n\n  onOpen(callback: () => void): void {\n    this.onOpenCallbacks.push(callback);\n  }\n\n  onClose(callback: () => void): void {\n    this.onCloseCallbacks.push(callback);\n  }\n\n  onError(callback: (error: Event) => void): void {\n    this.onErrorCallbacks.push(callback);\n  }\n\n  disconnect(): void {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n}\n","size_bytes":2968},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, Users, Calendar, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport AdminPanel from \"@/components/admin-panel\";\n\nexport default function Admin() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(loginData),\n      });\n      \n      if (response.ok) {\n        setIsLoggedIn(true);\n      } else {\n        alert('Đăng nhập thất bại');\n      }\n    } catch (error) {\n      alert('Lỗi đăng nhập');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  if (!isLoggedIn) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-center\">Đăng nhập Admin</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"username\">Tên đăng nhập</Label>\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={loginData.username}\n                  onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Mật khẩu</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={loginData.password}\n                  onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                  required\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Đang đăng nhập...\" : \"Đăng nhập\"}\n              </Button>\n            </form>\n            <div className=\"mt-4 text-center\">\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Quay lại\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <h1 className=\"text-xl font-bold text-gray-800\">Quản trị Admin</h1>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Quay lại\n                </Link>\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsLoggedIn(false)}\n              >\n                Đăng xuất\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <AdminPanel />\n      </main>\n    </div>\n  );\n}\n","size_bytes":3939},"client/src/pages/booking-lookup.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { ArrowLeft, Search, QrCode, Calendar, User, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function BookingLookup() {\n  const [bookingCode, setBookingCode] = useState(\"\");\n  const [shouldFetch, setShouldFetch] = useState(false);\n\n  const { data: booking, isLoading, error } = useQuery({\n    queryKey: ['/api/bookings/lookup', bookingCode],\n    enabled: shouldFetch && bookingCode.length > 0,\n    retry: false,\n  });\n\n  const handleLookup = (e: React.FormEvent) => {\n    e.preventDefault();\n    setShouldFetch(true);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('vi-VN', {\n      style: 'currency',\n      currency: 'VND',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('vi-VN', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <header className=\"bg-white shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <h1 className=\"text-xl font-bold text-gray-800\">Tra cứu đặt lịch</h1>\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Quay lại\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <QrCode className=\"h-5 w-5\" />\n              <span>Tra cứu thông tin đặt lịch</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLookup} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"bookingCode\">Mã đặt lịch</Label>\n                <Input\n                  id=\"bookingCode\"\n                  type=\"text\"\n                  value={bookingCode}\n                  onChange={(e) => setBookingCode(e.target.value.toUpperCase())}\n                  placeholder=\"Nhập mã đặt lịch (VD: SR123456)\"\n                  required\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                <Search className=\"h-4 w-4 mr-2\" />\n                {isLoading ? \"Đang tra cứu...\" : \"Tra cứu\"}\n              </Button>\n            </form>\n\n            {error && (\n              <div className=\"mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n                <p className=\"text-red-600\">Không tìm thấy thông tin đặt lịch</p>\n              </div>\n            )}\n\n            {booking && (\n              <div className=\"mt-6 space-y-4\">\n                <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <h3 className=\"font-semibold text-green-800 mb-2\">Thông tin đặt lịch</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Calendar className=\"h-4 w-4 text-green-600\" />\n                      <span>\n                        <strong>Ngày:</strong> {formatDate(booking.bookingDate)}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4 text-green-600\" />\n                      <span>\n                        <strong>Giờ:</strong> {booking.startTime} - {booking.endTime}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <User className=\"h-4 w-4 text-green-600\" />\n                      <span>\n                        <strong>Kỹ thuật viên:</strong> {booking.technician?.name}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <h3 className=\"font-semibold text-blue-800 mb-2\">Thông tin khách hàng</h3>\n                  <div className=\"space-y-1 text-sm\">\n                    <p><strong>Tên:</strong> {booking.customerName}</p>\n                    <p><strong>Số điện thoại:</strong> {booking.customerPhone}</p>\n                    {booking.customerNotes && (\n                      <p><strong>Ghi chú:</strong> {booking.customerNotes}</p>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-gray-50 border border-gray-200 rounded-lg\">\n                  <h3 className=\"font-semibold text-gray-800 mb-2\">Dịch vụ</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>{booking.service?.name} ({booking.duration} phút)</span>\n                      <span className=\"font-medium\">\n                        {formatCurrency(booking.duration === 45 ? booking.service?.price45 : booking.service?.price90)}\n                      </span>\n                    </div>\n                    {booking.additionalServices?.map((service: any) => (\n                      <div key={service.id} className=\"flex justify-between\">\n                        <span>{service.name}</span>\n                        <span className=\"font-medium\">{formatCurrency(service.price)}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <h3 className=\"font-semibold text-yellow-800 mb-2\">Thanh toán</h3>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Tổng tiền:</span>\n                      <span className=\"font-medium\">{formatCurrency(booking.totalAmount)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Đã đặt cọc:</span>\n                      <span className=\"font-medium\">{formatCurrency(booking.depositAmount)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Còn lại:</span>\n                      <span className=\"font-medium\">{formatCurrency(booking.totalAmount - booking.depositAmount)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Trạng thái:</span>\n                      <span className={`font-medium ${\n                        booking.status === 'confirmed' ? 'text-green-600' :\n                        booking.status === 'pending' ? 'text-yellow-600' :\n                        'text-red-600'\n                      }`}>\n                        {booking.status === 'confirmed' ? 'Đã xác nhận' :\n                         booking.status === 'pending' ? 'Chờ xác nhận' :\n                         'Đã hủy'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7762},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport BookingFlow from \"@/components/booking-flow\";\nimport BookingSummary from \"@/components/booking-summary\";\nimport PaymentModal from \"@/components/payment-modal\";\nimport QRScanner from \"@/components/qr-scanner\";\nimport { Waves, QrCode, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [showQRScanner, setShowQRScanner] = useState(false);\n  const [bookingData, setBookingData] = useState({\n    method: \"time\",\n    selectedDate: new Date().toISOString().split('T')[0],\n    selectedTime: \"\",\n    selectedTechnician: null,\n    selectedService: null,\n    selectedDuration: 45,\n    additionalServices: [],\n    customerInfo: {\n      name: \"\",\n      phone: \"\",\n      notes: \"\",\n    },\n    totalAmount: 0,\n    depositAmount: 0,\n  });\n\n  // Seed data on first load\n  const { data: seedResult } = useQuery({\n    queryKey: ['/api/seed'],\n    queryFn: async () => {\n      try {\n        const response = await fetch('/api/seed', { method: 'POST' });\n        if (!response.ok) throw new Error('Failed to seed');\n        return response.json();\n      } catch (error) {\n        // Ignore errors if data already exists\n        return null;\n      }\n    },\n    staleTime: Infinity,\n    retry: false,\n  });\n\n  const handleBookingSubmit = () => {\n    if (!bookingData.selectedService || !bookingData.selectedTechnician || !bookingData.selectedTime) {\n      toast({\n        title: \"Thông tin chưa đầy đủ\",\n        description: \"Vui lòng chọn đầy đủ dịch vụ, kỹ thuật viên và thời gian\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!bookingData.customerInfo.name || !bookingData.customerInfo.phone) {\n      toast({\n        title: \"Thông tin khách hàng chưa đầy đủ\",\n        description: \"Vui lòng điền đầy đủ họ tên và số điện thoại\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setShowPaymentModal(true);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                <Waves className=\"text-white text-lg\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-gray-800\">Spa Thư Giãn</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setShowQRScanner(true)}\n                className=\"text-gray-600 hover:text-primary\"\n              >\n                <QrCode className=\"h-5 w-5\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                asChild\n                className=\"text-gray-600 hover:text-primary\"\n              >\n                <Link href=\"/admin\">\n                  <Settings className=\"h-5 w-5\" />\n                </Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Hero Section */}\n          <div className=\"lg:col-span-3\">\n            <Card className=\"bg-gradient-to-r from-primary to-blue-600 text-white\">\n              <CardContent className=\"p-6\">\n                <h2 className=\"text-2xl font-bold mb-2\">Đặt Lịch Massage</h2>\n                <p className=\"text-blue-100 mb-4\">Thư giãn với dịch vụ massage chuyên nghiệp</p>\n                <div className=\"flex items-center space-x-4 text-sm\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span>🕐</span>\n                    <span>13:00 - 20:00</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <span>⭐</span>\n                    <span>4.9/5 (2,341 đánh giá)</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Booking Flow */}\n          <div className=\"lg:col-span-2\">\n            <BookingFlow\n              bookingData={bookingData}\n              onBookingDataChange={setBookingData}\n            />\n          </div>\n\n          {/* Booking Summary */}\n          <div className=\"lg:col-span-1\">\n            <BookingSummary\n              bookingData={bookingData}\n              onSubmit={handleBookingSubmit}\n            />\n          </div>\n        </div>\n      </main>\n\n      {/* Payment Modal */}\n      <PaymentModal\n        isOpen={showPaymentModal}\n        onClose={() => setShowPaymentModal(false)}\n        bookingData={bookingData}\n      />\n\n      {/* QR Scanner */}\n      <QRScanner\n        isOpen={showQRScanner}\n        onClose={() => setShowQRScanner(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":5503},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Fixed blocked time slot bug - now properly blocks all overlapping time slots\n[x] 5. Fixed \"Hoàn tất\" button issue in step 3 - removed non-functional button  \n[x] 6. Migration and bug fixes completed - ready for user","size_bytes":384}}}